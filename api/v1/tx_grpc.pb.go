// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: janction/videoUpscaler/v1/tx.proto

package videoUpscalerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_CreateVideoUpscalerTask_FullMethodName = "/janction.videoUpscaler.v1.Msg/CreateVideoUpscalerTask"
	Msg_AddWorker_FullMethodName               = "/janction.videoUpscaler.v1.Msg/AddWorker"
	Msg_SubscribeWorkerToTask_FullMethodName   = "/janction.videoUpscaler.v1.Msg/SubscribeWorkerToTask"
	Msg_ProposeSolution_FullMethodName         = "/janction.videoUpscaler.v1.Msg/ProposeSolution"
	Msg_SubmitValidation_FullMethodName        = "/janction.videoUpscaler.v1.Msg/SubmitValidation"
	Msg_RevealSolution_FullMethodName          = "/janction.videoUpscaler.v1.Msg/RevealSolution"
	Msg_SubmitSolution_FullMethodName          = "/janction.videoUpscaler.v1.Msg/SubmitSolution"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// CreateGame create a game.
	CreateVideoUpscalerTask(ctx context.Context, in *MsgCreateVideoUpscalerTask, opts ...grpc.CallOption) (*MsgCreateVideoUpscalerTaskResponse, error)
	// Adds a new worker
	AddWorker(ctx context.Context, in *MsgAddWorker, opts ...grpc.CallOption) (*MsgAddWorkerResponse, error)
	SubscribeWorkerToTask(ctx context.Context, in *MsgSubscribeWorkerToTask, opts ...grpc.CallOption) (*MsgSubscribeWorkerToTaskResponse, error)
	// Propose a solution for the test of the nodes to validate
	ProposeSolution(ctx context.Context, in *MsgProposeSolution, opts ...grpc.CallOption) (*MsgProposeSolutionResponse, error)
	// Propose a solution for the test of the nodes to validate
	SubmitValidation(ctx context.Context, in *MsgSubmitValidation, opts ...grpc.CallOption) (*MsgSubmitValidationResponse, error)
	// Propose a solution for the test of the nodes to validate
	RevealSolution(ctx context.Context, in *MsgRevealSolution, opts ...grpc.CallOption) (*MsgRevealSolutionResponse, error)
	// Submits the solution to IPFS
	SubmitSolution(ctx context.Context, in *MsgSubmitSolution, opts ...grpc.CallOption) (*MsgSubmitSolutionResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateVideoUpscalerTask(ctx context.Context, in *MsgCreateVideoUpscalerTask, opts ...grpc.CallOption) (*MsgCreateVideoUpscalerTaskResponse, error) {
	out := new(MsgCreateVideoUpscalerTaskResponse)
	err := c.cc.Invoke(ctx, Msg_CreateVideoUpscalerTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddWorker(ctx context.Context, in *MsgAddWorker, opts ...grpc.CallOption) (*MsgAddWorkerResponse, error) {
	out := new(MsgAddWorkerResponse)
	err := c.cc.Invoke(ctx, Msg_AddWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubscribeWorkerToTask(ctx context.Context, in *MsgSubscribeWorkerToTask, opts ...grpc.CallOption) (*MsgSubscribeWorkerToTaskResponse, error) {
	out := new(MsgSubscribeWorkerToTaskResponse)
	err := c.cc.Invoke(ctx, Msg_SubscribeWorkerToTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposeSolution(ctx context.Context, in *MsgProposeSolution, opts ...grpc.CallOption) (*MsgProposeSolutionResponse, error) {
	out := new(MsgProposeSolutionResponse)
	err := c.cc.Invoke(ctx, Msg_ProposeSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitValidation(ctx context.Context, in *MsgSubmitValidation, opts ...grpc.CallOption) (*MsgSubmitValidationResponse, error) {
	out := new(MsgSubmitValidationResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitValidation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevealSolution(ctx context.Context, in *MsgRevealSolution, opts ...grpc.CallOption) (*MsgRevealSolutionResponse, error) {
	out := new(MsgRevealSolutionResponse)
	err := c.cc.Invoke(ctx, Msg_RevealSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitSolution(ctx context.Context, in *MsgSubmitSolution, opts ...grpc.CallOption) (*MsgSubmitSolutionResponse, error) {
	out := new(MsgSubmitSolutionResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// CreateGame create a game.
	CreateVideoUpscalerTask(context.Context, *MsgCreateVideoUpscalerTask) (*MsgCreateVideoUpscalerTaskResponse, error)
	// Adds a new worker
	AddWorker(context.Context, *MsgAddWorker) (*MsgAddWorkerResponse, error)
	SubscribeWorkerToTask(context.Context, *MsgSubscribeWorkerToTask) (*MsgSubscribeWorkerToTaskResponse, error)
	// Propose a solution for the test of the nodes to validate
	ProposeSolution(context.Context, *MsgProposeSolution) (*MsgProposeSolutionResponse, error)
	// Propose a solution for the test of the nodes to validate
	SubmitValidation(context.Context, *MsgSubmitValidation) (*MsgSubmitValidationResponse, error)
	// Propose a solution for the test of the nodes to validate
	RevealSolution(context.Context, *MsgRevealSolution) (*MsgRevealSolutionResponse, error)
	// Submits the solution to IPFS
	SubmitSolution(context.Context, *MsgSubmitSolution) (*MsgSubmitSolutionResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateVideoUpscalerTask(context.Context, *MsgCreateVideoUpscalerTask) (*MsgCreateVideoUpscalerTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideoUpscalerTask not implemented")
}
func (UnimplementedMsgServer) AddWorker(context.Context, *MsgAddWorker) (*MsgAddWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorker not implemented")
}
func (UnimplementedMsgServer) SubscribeWorkerToTask(context.Context, *MsgSubscribeWorkerToTask) (*MsgSubscribeWorkerToTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeWorkerToTask not implemented")
}
func (UnimplementedMsgServer) ProposeSolution(context.Context, *MsgProposeSolution) (*MsgProposeSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeSolution not implemented")
}
func (UnimplementedMsgServer) SubmitValidation(context.Context, *MsgSubmitValidation) (*MsgSubmitValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitValidation not implemented")
}
func (UnimplementedMsgServer) RevealSolution(context.Context, *MsgRevealSolution) (*MsgRevealSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevealSolution not implemented")
}
func (UnimplementedMsgServer) SubmitSolution(context.Context, *MsgSubmitSolution) (*MsgSubmitSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSolution not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateVideoUpscalerTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVideoUpscalerTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVideoUpscalerTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateVideoUpscalerTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVideoUpscalerTask(ctx, req.(*MsgCreateVideoUpscalerTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddWorker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddWorker(ctx, req.(*MsgAddWorker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubscribeWorkerToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubscribeWorkerToTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubscribeWorkerToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubscribeWorkerToTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubscribeWorkerToTask(ctx, req.(*MsgSubscribeWorkerToTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposeSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeSolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProposeSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeSolution(ctx, req.(*MsgProposeSolution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitValidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitValidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitValidation(ctx, req.(*MsgSubmitValidation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevealSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevealSolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevealSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RevealSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevealSolution(ctx, req.(*MsgRevealSolution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitSolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitSolution(ctx, req.(*MsgSubmitSolution))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "janction.videoUpscaler.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideoUpscalerTask",
			Handler:    _Msg_CreateVideoUpscalerTask_Handler,
		},
		{
			MethodName: "AddWorker",
			Handler:    _Msg_AddWorker_Handler,
		},
		{
			MethodName: "SubscribeWorkerToTask",
			Handler:    _Msg_SubscribeWorkerToTask_Handler,
		},
		{
			MethodName: "ProposeSolution",
			Handler:    _Msg_ProposeSolution_Handler,
		},
		{
			MethodName: "SubmitValidation",
			Handler:    _Msg_SubmitValidation_Handler,
		},
		{
			MethodName: "RevealSolution",
			Handler:    _Msg_RevealSolution_Handler,
		},
		{
			MethodName: "SubmitSolution",
			Handler:    _Msg_SubmitSolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "janction/videoUpscaler/v1/tx.proto",
}
