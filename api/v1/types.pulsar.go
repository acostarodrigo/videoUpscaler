// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package videoUpscalerv1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Params                        protoreflect.MessageDescriptor
	fd_Params_min_worker_staking     protoreflect.FieldDescriptor
	fd_Params_max_workers_per_thread protoreflect.FieldDescriptor
	fd_Params_min_validators         protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_Params = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("Params")
	fd_Params_min_worker_staking = md_Params.Fields().ByName("min_worker_staking")
	fd_Params_max_workers_per_thread = md_Params.Fields().ByName("max_workers_per_thread")
	fd_Params_min_validators = md_Params.Fields().ByName("min_validators")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MinWorkerStaking != nil {
		value := protoreflect.ValueOfMessage(x.MinWorkerStaking.ProtoReflect())
		if !f(fd_Params_min_worker_staking, value) {
			return
		}
	}
	if x.MaxWorkersPerThread != int64(0) {
		value := protoreflect.ValueOfInt64(x.MaxWorkersPerThread)
		if !f(fd_Params_max_workers_per_thread, value) {
			return
		}
	}
	if x.MinValidators != int64(0) {
		value := protoreflect.ValueOfInt64(x.MinValidators)
		if !f(fd_Params_min_validators, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Params.min_worker_staking":
		return x.MinWorkerStaking != nil
	case "janction.videoUpscaler.v1.Params.max_workers_per_thread":
		return x.MaxWorkersPerThread != int64(0)
	case "janction.videoUpscaler.v1.Params.min_validators":
		return x.MinValidators != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Params"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Params.min_worker_staking":
		x.MinWorkerStaking = nil
	case "janction.videoUpscaler.v1.Params.max_workers_per_thread":
		x.MaxWorkersPerThread = int64(0)
	case "janction.videoUpscaler.v1.Params.min_validators":
		x.MinValidators = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Params"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.Params.min_worker_staking":
		value := x.MinWorkerStaking
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "janction.videoUpscaler.v1.Params.max_workers_per_thread":
		value := x.MaxWorkersPerThread
		return protoreflect.ValueOfInt64(value)
	case "janction.videoUpscaler.v1.Params.min_validators":
		value := x.MinValidators
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Params"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Params.min_worker_staking":
		x.MinWorkerStaking = value.Message().Interface().(*v1beta1.Coin)
	case "janction.videoUpscaler.v1.Params.max_workers_per_thread":
		x.MaxWorkersPerThread = value.Int()
	case "janction.videoUpscaler.v1.Params.min_validators":
		x.MinValidators = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Params"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Params.min_worker_staking":
		if x.MinWorkerStaking == nil {
			x.MinWorkerStaking = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.MinWorkerStaking.ProtoReflect())
	case "janction.videoUpscaler.v1.Params.max_workers_per_thread":
		panic(fmt.Errorf("field max_workers_per_thread of message janction.videoUpscaler.v1.Params is not mutable"))
	case "janction.videoUpscaler.v1.Params.min_validators":
		panic(fmt.Errorf("field min_validators of message janction.videoUpscaler.v1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Params"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Params.min_worker_staking":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "janction.videoUpscaler.v1.Params.max_workers_per_thread":
		return protoreflect.ValueOfInt64(int64(0))
	case "janction.videoUpscaler.v1.Params.min_validators":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Params"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MinWorkerStaking != nil {
			l = options.Size(x.MinWorkerStaking)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxWorkersPerThread != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxWorkersPerThread))
		}
		if x.MinValidators != 0 {
			n += 1 + runtime.Sov(uint64(x.MinValidators))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MinValidators != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinValidators))
			i--
			dAtA[i] = 0x18
		}
		if x.MaxWorkersPerThread != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxWorkersPerThread))
			i--
			dAtA[i] = 0x10
		}
		if x.MinWorkerStaking != nil {
			encoded, err := options.Marshal(x.MinWorkerStaking)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinWorkerStaking", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MinWorkerStaking == nil {
					x.MinWorkerStaking = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinWorkerStaking); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxWorkersPerThread", wireType)
				}
				x.MaxWorkersPerThread = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxWorkersPerThread |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinValidators", wireType)
				}
				x.MinValidators = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinValidators |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_GenesisState_4_list)(nil)

type _GenesisState_4_list struct {
	list *[]*IndexedVideoUpscalerTask
}

func (x *_GenesisState_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*IndexedVideoUpscalerTask)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*IndexedVideoUpscalerTask)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_4_list) AppendMutable() protoreflect.Value {
	v := new(IndexedVideoUpscalerTask)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_4_list) NewElement() protoreflect.Value {
	v := new(IndexedVideoUpscalerTask)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_5_list)(nil)

type _GenesisState_5_list struct {
	list *[]*Worker
}

func (x *_GenesisState_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Worker)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Worker)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_5_list) AppendMutable() protoreflect.Value {
	v := new(Worker)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_5_list) NewElement() protoreflect.Value {
	v := new(Worker)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                       protoreflect.MessageDescriptor
	fd_GenesisState_params                protoreflect.FieldDescriptor
	fd_GenesisState_videoUpscalerTaskInfo protoreflect.FieldDescriptor
	fd_GenesisState_videoUpscalerTaskList protoreflect.FieldDescriptor
	fd_GenesisState_workers               protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_GenesisState = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_videoUpscalerTaskInfo = md_GenesisState.Fields().ByName("videoUpscalerTaskInfo")
	fd_GenesisState_videoUpscalerTaskList = md_GenesisState.Fields().ByName("videoUpscalerTaskList")
	fd_GenesisState_workers = md_GenesisState.Fields().ByName("workers")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if x.VideoUpscalerTaskInfo != nil {
		value := protoreflect.ValueOfMessage(x.VideoUpscalerTaskInfo.ProtoReflect())
		if !f(fd_GenesisState_videoUpscalerTaskInfo, value) {
			return
		}
	}
	if len(x.VideoUpscalerTaskList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_4_list{list: &x.VideoUpscalerTaskList})
		if !f(fd_GenesisState_videoUpscalerTaskList, value) {
			return
		}
	}
	if len(x.Workers) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_5_list{list: &x.Workers})
		if !f(fd_GenesisState_workers, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.GenesisState.params":
		return x.Params != nil
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskInfo":
		return x.VideoUpscalerTaskInfo != nil
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskList":
		return len(x.VideoUpscalerTaskList) != 0
	case "janction.videoUpscaler.v1.GenesisState.workers":
		return len(x.Workers) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.GenesisState"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.GenesisState.params":
		x.Params = nil
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskInfo":
		x.VideoUpscalerTaskInfo = nil
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskList":
		x.VideoUpscalerTaskList = nil
	case "janction.videoUpscaler.v1.GenesisState.workers":
		x.Workers = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.GenesisState"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskInfo":
		value := x.VideoUpscalerTaskInfo
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskList":
		if len(x.VideoUpscalerTaskList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_4_list{})
		}
		listValue := &_GenesisState_4_list{list: &x.VideoUpscalerTaskList}
		return protoreflect.ValueOfList(listValue)
	case "janction.videoUpscaler.v1.GenesisState.workers":
		if len(x.Workers) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_5_list{})
		}
		listValue := &_GenesisState_5_list{list: &x.Workers}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.GenesisState"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskInfo":
		x.VideoUpscalerTaskInfo = value.Message().Interface().(*VideoUpscalerTaskInfo)
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskList":
		lv := value.List()
		clv := lv.(*_GenesisState_4_list)
		x.VideoUpscalerTaskList = *clv.list
	case "janction.videoUpscaler.v1.GenesisState.workers":
		lv := value.List()
		clv := lv.(*_GenesisState_5_list)
		x.Workers = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.GenesisState"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskInfo":
		if x.VideoUpscalerTaskInfo == nil {
			x.VideoUpscalerTaskInfo = new(VideoUpscalerTaskInfo)
		}
		return protoreflect.ValueOfMessage(x.VideoUpscalerTaskInfo.ProtoReflect())
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskList":
		if x.VideoUpscalerTaskList == nil {
			x.VideoUpscalerTaskList = []*IndexedVideoUpscalerTask{}
		}
		value := &_GenesisState_4_list{list: &x.VideoUpscalerTaskList}
		return protoreflect.ValueOfList(value)
	case "janction.videoUpscaler.v1.GenesisState.workers":
		if x.Workers == nil {
			x.Workers = []*Worker{}
		}
		value := &_GenesisState_5_list{list: &x.Workers}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.GenesisState"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskInfo":
		m := new(VideoUpscalerTaskInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskList":
		list := []*IndexedVideoUpscalerTask{}
		return protoreflect.ValueOfList(&_GenesisState_4_list{list: &list})
	case "janction.videoUpscaler.v1.GenesisState.workers":
		list := []*Worker{}
		return protoreflect.ValueOfList(&_GenesisState_5_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.GenesisState"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.VideoUpscalerTaskInfo != nil {
			l = options.Size(x.VideoUpscalerTaskInfo)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.VideoUpscalerTaskList) > 0 {
			for _, e := range x.VideoUpscalerTaskList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Workers) > 0 {
			for _, e := range x.Workers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Workers) > 0 {
			for iNdEx := len(x.Workers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Workers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.VideoUpscalerTaskList) > 0 {
			for iNdEx := len(x.VideoUpscalerTaskList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.VideoUpscalerTaskList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.VideoUpscalerTaskInfo != nil {
			encoded, err := options.Marshal(x.VideoUpscalerTaskInfo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VideoUpscalerTaskInfo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.VideoUpscalerTaskInfo == nil {
					x.VideoUpscalerTaskInfo = &VideoUpscalerTaskInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VideoUpscalerTaskInfo); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VideoUpscalerTaskList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VideoUpscalerTaskList = append(x.VideoUpscalerTaskList, &IndexedVideoUpscalerTask{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VideoUpscalerTaskList[len(x.VideoUpscalerTaskList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Workers = append(x.Workers, &Worker{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Workers[len(x.Workers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Worker                      protoreflect.MessageDescriptor
	fd_Worker_address              protoreflect.FieldDescriptor
	fd_Worker_reputation           protoreflect.FieldDescriptor
	fd_Worker_enabled              protoreflect.FieldDescriptor
	fd_Worker_current_task_id      protoreflect.FieldDescriptor
	fd_Worker_current_thread_index protoreflect.FieldDescriptor
	fd_Worker_public_ip            protoreflect.FieldDescriptor
	fd_Worker_ipfs_id              protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_Worker = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("Worker")
	fd_Worker_address = md_Worker.Fields().ByName("address")
	fd_Worker_reputation = md_Worker.Fields().ByName("reputation")
	fd_Worker_enabled = md_Worker.Fields().ByName("enabled")
	fd_Worker_current_task_id = md_Worker.Fields().ByName("current_task_id")
	fd_Worker_current_thread_index = md_Worker.Fields().ByName("current_thread_index")
	fd_Worker_public_ip = md_Worker.Fields().ByName("public_ip")
	fd_Worker_ipfs_id = md_Worker.Fields().ByName("ipfs_id")
}

var _ protoreflect.Message = (*fastReflection_Worker)(nil)

type fastReflection_Worker Worker

func (x *Worker) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Worker)(x)
}

func (x *Worker) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Worker_messageType fastReflection_Worker_messageType
var _ protoreflect.MessageType = fastReflection_Worker_messageType{}

type fastReflection_Worker_messageType struct{}

func (x fastReflection_Worker_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Worker)(nil)
}
func (x fastReflection_Worker_messageType) New() protoreflect.Message {
	return new(fastReflection_Worker)
}
func (x fastReflection_Worker_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Worker
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Worker) Descriptor() protoreflect.MessageDescriptor {
	return md_Worker
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Worker) Type() protoreflect.MessageType {
	return _fastReflection_Worker_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Worker) New() protoreflect.Message {
	return new(fastReflection_Worker)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Worker) Interface() protoreflect.ProtoMessage {
	return (*Worker)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Worker) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_Worker_address, value) {
			return
		}
	}
	if x.Reputation != nil {
		value := protoreflect.ValueOfMessage(x.Reputation.ProtoReflect())
		if !f(fd_Worker_reputation, value) {
			return
		}
	}
	if x.Enabled != false {
		value := protoreflect.ValueOfBool(x.Enabled)
		if !f(fd_Worker_enabled, value) {
			return
		}
	}
	if x.CurrentTaskId != "" {
		value := protoreflect.ValueOfString(x.CurrentTaskId)
		if !f(fd_Worker_current_task_id, value) {
			return
		}
	}
	if x.CurrentThreadIndex != int32(0) {
		value := protoreflect.ValueOfInt32(x.CurrentThreadIndex)
		if !f(fd_Worker_current_thread_index, value) {
			return
		}
	}
	if x.PublicIp != "" {
		value := protoreflect.ValueOfString(x.PublicIp)
		if !f(fd_Worker_public_ip, value) {
			return
		}
	}
	if x.IpfsId != "" {
		value := protoreflect.ValueOfString(x.IpfsId)
		if !f(fd_Worker_ipfs_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Worker) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.address":
		return x.Address != ""
	case "janction.videoUpscaler.v1.Worker.reputation":
		return x.Reputation != nil
	case "janction.videoUpscaler.v1.Worker.enabled":
		return x.Enabled != false
	case "janction.videoUpscaler.v1.Worker.current_task_id":
		return x.CurrentTaskId != ""
	case "janction.videoUpscaler.v1.Worker.current_thread_index":
		return x.CurrentThreadIndex != int32(0)
	case "janction.videoUpscaler.v1.Worker.public_ip":
		return x.PublicIp != ""
	case "janction.videoUpscaler.v1.Worker.ipfs_id":
		return x.IpfsId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Worker) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.address":
		x.Address = ""
	case "janction.videoUpscaler.v1.Worker.reputation":
		x.Reputation = nil
	case "janction.videoUpscaler.v1.Worker.enabled":
		x.Enabled = false
	case "janction.videoUpscaler.v1.Worker.current_task_id":
		x.CurrentTaskId = ""
	case "janction.videoUpscaler.v1.Worker.current_thread_index":
		x.CurrentThreadIndex = int32(0)
	case "janction.videoUpscaler.v1.Worker.public_ip":
		x.PublicIp = ""
	case "janction.videoUpscaler.v1.Worker.ipfs_id":
		x.IpfsId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Worker) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.Worker.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.Worker.reputation":
		value := x.Reputation
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.enabled":
		value := x.Enabled
		return protoreflect.ValueOfBool(value)
	case "janction.videoUpscaler.v1.Worker.current_task_id":
		value := x.CurrentTaskId
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.Worker.current_thread_index":
		value := x.CurrentThreadIndex
		return protoreflect.ValueOfInt32(value)
	case "janction.videoUpscaler.v1.Worker.public_ip":
		value := x.PublicIp
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.Worker.ipfs_id":
		value := x.IpfsId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Worker) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.address":
		x.Address = value.Interface().(string)
	case "janction.videoUpscaler.v1.Worker.reputation":
		x.Reputation = value.Message().Interface().(*Worker_Reputation)
	case "janction.videoUpscaler.v1.Worker.enabled":
		x.Enabled = value.Bool()
	case "janction.videoUpscaler.v1.Worker.current_task_id":
		x.CurrentTaskId = value.Interface().(string)
	case "janction.videoUpscaler.v1.Worker.current_thread_index":
		x.CurrentThreadIndex = int32(value.Int())
	case "janction.videoUpscaler.v1.Worker.public_ip":
		x.PublicIp = value.Interface().(string)
	case "janction.videoUpscaler.v1.Worker.ipfs_id":
		x.IpfsId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Worker) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.reputation":
		if x.Reputation == nil {
			x.Reputation = new(Worker_Reputation)
		}
		return protoreflect.ValueOfMessage(x.Reputation.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.address":
		panic(fmt.Errorf("field address of message janction.videoUpscaler.v1.Worker is not mutable"))
	case "janction.videoUpscaler.v1.Worker.enabled":
		panic(fmt.Errorf("field enabled of message janction.videoUpscaler.v1.Worker is not mutable"))
	case "janction.videoUpscaler.v1.Worker.current_task_id":
		panic(fmt.Errorf("field current_task_id of message janction.videoUpscaler.v1.Worker is not mutable"))
	case "janction.videoUpscaler.v1.Worker.current_thread_index":
		panic(fmt.Errorf("field current_thread_index of message janction.videoUpscaler.v1.Worker is not mutable"))
	case "janction.videoUpscaler.v1.Worker.public_ip":
		panic(fmt.Errorf("field public_ip of message janction.videoUpscaler.v1.Worker is not mutable"))
	case "janction.videoUpscaler.v1.Worker.ipfs_id":
		panic(fmt.Errorf("field ipfs_id of message janction.videoUpscaler.v1.Worker is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Worker) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.address":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.Worker.reputation":
		m := new(Worker_Reputation)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.enabled":
		return protoreflect.ValueOfBool(false)
	case "janction.videoUpscaler.v1.Worker.current_task_id":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.Worker.current_thread_index":
		return protoreflect.ValueOfInt32(int32(0))
	case "janction.videoUpscaler.v1.Worker.public_ip":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.Worker.ipfs_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Worker) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.Worker", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Worker) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Worker) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Worker) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Worker) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Worker)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Reputation != nil {
			l = options.Size(x.Reputation)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Enabled {
			n += 2
		}
		l = len(x.CurrentTaskId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentThreadIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentThreadIndex))
		}
		l = len(x.PublicIp)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IpfsId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Worker)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.IpfsId) > 0 {
			i -= len(x.IpfsId)
			copy(dAtA[i:], x.IpfsId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IpfsId)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.PublicIp) > 0 {
			i -= len(x.PublicIp)
			copy(dAtA[i:], x.PublicIp)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicIp)))
			i--
			dAtA[i] = 0x3a
		}
		if x.CurrentThreadIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentThreadIndex))
			i--
			dAtA[i] = 0x30
		}
		if len(x.CurrentTaskId) > 0 {
			i -= len(x.CurrentTaskId)
			copy(dAtA[i:], x.CurrentTaskId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurrentTaskId)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Enabled {
			i--
			if x.Enabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if x.Reputation != nil {
			encoded, err := options.Marshal(x.Reputation)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Worker)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Worker: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Reputation == nil {
					x.Reputation = &Worker_Reputation{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Reputation); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Enabled = bool(v != 0)
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentTaskId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentTaskId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentThreadIndex", wireType)
				}
				x.CurrentThreadIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentThreadIndex |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicIp = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IpfsId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IpfsId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Worker_Reputation_6_list)(nil)

type _Worker_Reputation_6_list struct {
	list *[]int64
}

func (x *_Worker_Reputation_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Worker_Reputation_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfInt64((*x.list)[i])
}

func (x *_Worker_Reputation_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Worker_Reputation_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Worker_Reputation_6_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Worker_Reputation at list field RenderDurations as it is not of Message kind"))
}

func (x *_Worker_Reputation_6_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Worker_Reputation_6_list) NewElement() protoreflect.Value {
	v := int64(0)
	return protoreflect.ValueOfInt64(v)
}

func (x *_Worker_Reputation_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Worker_Reputation                  protoreflect.MessageDescriptor
	fd_Worker_Reputation_staked           protoreflect.FieldDescriptor
	fd_Worker_Reputation_points           protoreflect.FieldDescriptor
	fd_Worker_Reputation_validations      protoreflect.FieldDescriptor
	fd_Worker_Reputation_solutions        protoreflect.FieldDescriptor
	fd_Worker_Reputation_winnings         protoreflect.FieldDescriptor
	fd_Worker_Reputation_render_durations protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_Worker_Reputation = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("Worker").Messages().ByName("Reputation")
	fd_Worker_Reputation_staked = md_Worker_Reputation.Fields().ByName("staked")
	fd_Worker_Reputation_points = md_Worker_Reputation.Fields().ByName("points")
	fd_Worker_Reputation_validations = md_Worker_Reputation.Fields().ByName("validations")
	fd_Worker_Reputation_solutions = md_Worker_Reputation.Fields().ByName("solutions")
	fd_Worker_Reputation_winnings = md_Worker_Reputation.Fields().ByName("winnings")
	fd_Worker_Reputation_render_durations = md_Worker_Reputation.Fields().ByName("render_durations")
}

var _ protoreflect.Message = (*fastReflection_Worker_Reputation)(nil)

type fastReflection_Worker_Reputation Worker_Reputation

func (x *Worker_Reputation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Worker_Reputation)(x)
}

func (x *Worker_Reputation) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Worker_Reputation_messageType fastReflection_Worker_Reputation_messageType
var _ protoreflect.MessageType = fastReflection_Worker_Reputation_messageType{}

type fastReflection_Worker_Reputation_messageType struct{}

func (x fastReflection_Worker_Reputation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Worker_Reputation)(nil)
}
func (x fastReflection_Worker_Reputation_messageType) New() protoreflect.Message {
	return new(fastReflection_Worker_Reputation)
}
func (x fastReflection_Worker_Reputation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Worker_Reputation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Worker_Reputation) Descriptor() protoreflect.MessageDescriptor {
	return md_Worker_Reputation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Worker_Reputation) Type() protoreflect.MessageType {
	return _fastReflection_Worker_Reputation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Worker_Reputation) New() protoreflect.Message {
	return new(fastReflection_Worker_Reputation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Worker_Reputation) Interface() protoreflect.ProtoMessage {
	return (*Worker_Reputation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Worker_Reputation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Staked != nil {
		value := protoreflect.ValueOfMessage(x.Staked.ProtoReflect())
		if !f(fd_Worker_Reputation_staked, value) {
			return
		}
	}
	if x.Points != int64(0) {
		value := protoreflect.ValueOfInt64(x.Points)
		if !f(fd_Worker_Reputation_points, value) {
			return
		}
	}
	if x.Validations != int32(0) {
		value := protoreflect.ValueOfInt32(x.Validations)
		if !f(fd_Worker_Reputation_validations, value) {
			return
		}
	}
	if x.Solutions != int32(0) {
		value := protoreflect.ValueOfInt32(x.Solutions)
		if !f(fd_Worker_Reputation_solutions, value) {
			return
		}
	}
	if x.Winnings != nil {
		value := protoreflect.ValueOfMessage(x.Winnings.ProtoReflect())
		if !f(fd_Worker_Reputation_winnings, value) {
			return
		}
	}
	if len(x.RenderDurations) != 0 {
		value := protoreflect.ValueOfList(&_Worker_Reputation_6_list{list: &x.RenderDurations})
		if !f(fd_Worker_Reputation_render_durations, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Worker_Reputation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.Reputation.staked":
		return x.Staked != nil
	case "janction.videoUpscaler.v1.Worker.Reputation.points":
		return x.Points != int64(0)
	case "janction.videoUpscaler.v1.Worker.Reputation.validations":
		return x.Validations != int32(0)
	case "janction.videoUpscaler.v1.Worker.Reputation.solutions":
		return x.Solutions != int32(0)
	case "janction.videoUpscaler.v1.Worker.Reputation.winnings":
		return x.Winnings != nil
	case "janction.videoUpscaler.v1.Worker.Reputation.render_durations":
		return len(x.RenderDurations) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker.Reputation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker.Reputation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Worker_Reputation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.Reputation.staked":
		x.Staked = nil
	case "janction.videoUpscaler.v1.Worker.Reputation.points":
		x.Points = int64(0)
	case "janction.videoUpscaler.v1.Worker.Reputation.validations":
		x.Validations = int32(0)
	case "janction.videoUpscaler.v1.Worker.Reputation.solutions":
		x.Solutions = int32(0)
	case "janction.videoUpscaler.v1.Worker.Reputation.winnings":
		x.Winnings = nil
	case "janction.videoUpscaler.v1.Worker.Reputation.render_durations":
		x.RenderDurations = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker.Reputation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker.Reputation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Worker_Reputation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.Worker.Reputation.staked":
		value := x.Staked
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.Reputation.points":
		value := x.Points
		return protoreflect.ValueOfInt64(value)
	case "janction.videoUpscaler.v1.Worker.Reputation.validations":
		value := x.Validations
		return protoreflect.ValueOfInt32(value)
	case "janction.videoUpscaler.v1.Worker.Reputation.solutions":
		value := x.Solutions
		return protoreflect.ValueOfInt32(value)
	case "janction.videoUpscaler.v1.Worker.Reputation.winnings":
		value := x.Winnings
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.Reputation.render_durations":
		if len(x.RenderDurations) == 0 {
			return protoreflect.ValueOfList(&_Worker_Reputation_6_list{})
		}
		listValue := &_Worker_Reputation_6_list{list: &x.RenderDurations}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker.Reputation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker.Reputation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Worker_Reputation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.Reputation.staked":
		x.Staked = value.Message().Interface().(*v1beta1.Coin)
	case "janction.videoUpscaler.v1.Worker.Reputation.points":
		x.Points = value.Int()
	case "janction.videoUpscaler.v1.Worker.Reputation.validations":
		x.Validations = int32(value.Int())
	case "janction.videoUpscaler.v1.Worker.Reputation.solutions":
		x.Solutions = int32(value.Int())
	case "janction.videoUpscaler.v1.Worker.Reputation.winnings":
		x.Winnings = value.Message().Interface().(*v1beta1.Coin)
	case "janction.videoUpscaler.v1.Worker.Reputation.render_durations":
		lv := value.List()
		clv := lv.(*_Worker_Reputation_6_list)
		x.RenderDurations = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker.Reputation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker.Reputation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Worker_Reputation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.Reputation.staked":
		if x.Staked == nil {
			x.Staked = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Staked.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.Reputation.winnings":
		if x.Winnings == nil {
			x.Winnings = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Winnings.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.Reputation.render_durations":
		if x.RenderDurations == nil {
			x.RenderDurations = []int64{}
		}
		value := &_Worker_Reputation_6_list{list: &x.RenderDurations}
		return protoreflect.ValueOfList(value)
	case "janction.videoUpscaler.v1.Worker.Reputation.points":
		panic(fmt.Errorf("field points of message janction.videoUpscaler.v1.Worker.Reputation is not mutable"))
	case "janction.videoUpscaler.v1.Worker.Reputation.validations":
		panic(fmt.Errorf("field validations of message janction.videoUpscaler.v1.Worker.Reputation is not mutable"))
	case "janction.videoUpscaler.v1.Worker.Reputation.solutions":
		panic(fmt.Errorf("field solutions of message janction.videoUpscaler.v1.Worker.Reputation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker.Reputation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker.Reputation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Worker_Reputation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.Worker.Reputation.staked":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.Reputation.points":
		return protoreflect.ValueOfInt64(int64(0))
	case "janction.videoUpscaler.v1.Worker.Reputation.validations":
		return protoreflect.ValueOfInt32(int32(0))
	case "janction.videoUpscaler.v1.Worker.Reputation.solutions":
		return protoreflect.ValueOfInt32(int32(0))
	case "janction.videoUpscaler.v1.Worker.Reputation.winnings":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "janction.videoUpscaler.v1.Worker.Reputation.render_durations":
		list := []int64{}
		return protoreflect.ValueOfList(&_Worker_Reputation_6_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.Worker.Reputation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.Worker.Reputation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Worker_Reputation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.Worker.Reputation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Worker_Reputation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Worker_Reputation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Worker_Reputation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Worker_Reputation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Worker_Reputation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Staked != nil {
			l = options.Size(x.Staked)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Points != 0 {
			n += 1 + runtime.Sov(uint64(x.Points))
		}
		if x.Validations != 0 {
			n += 1 + runtime.Sov(uint64(x.Validations))
		}
		if x.Solutions != 0 {
			n += 1 + runtime.Sov(uint64(x.Solutions))
		}
		if x.Winnings != nil {
			l = options.Size(x.Winnings)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RenderDurations) > 0 {
			l = 0
			for _, e := range x.RenderDurations {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Worker_Reputation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RenderDurations) > 0 {
			var pksize2 int
			for _, num := range x.RenderDurations {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.RenderDurations {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x32
		}
		if x.Winnings != nil {
			encoded, err := options.Marshal(x.Winnings)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Solutions != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Solutions))
			i--
			dAtA[i] = 0x20
		}
		if x.Validations != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Validations))
			i--
			dAtA[i] = 0x18
		}
		if x.Points != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Points))
			i--
			dAtA[i] = 0x10
		}
		if x.Staked != nil {
			encoded, err := options.Marshal(x.Staked)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Worker_Reputation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Worker_Reputation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Worker_Reputation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Staked == nil {
					x.Staked = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Staked); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
				}
				x.Points = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Points |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
				}
				x.Validations = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Validations |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Solutions", wireType)
				}
				x.Solutions = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Solutions |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Winnings", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Winnings == nil {
					x.Winnings = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Winnings); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType == 0 {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.RenderDurations = append(x.RenderDurations, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.RenderDurations) == 0 {
						x.RenderDurations = make([]int64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.RenderDurations = append(x.RenderDurations, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RenderDurations", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_VideoUpscalerTask_10_list)(nil)

type _VideoUpscalerTask_10_list struct {
	list *[]*VideoUpscalerThread
}

func (x *_VideoUpscalerTask_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VideoUpscalerTask_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_VideoUpscalerTask_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerThread)
	(*x.list)[i] = concreteValue
}

func (x *_VideoUpscalerTask_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerThread)
	*x.list = append(*x.list, concreteValue)
}

func (x *_VideoUpscalerTask_10_list) AppendMutable() protoreflect.Value {
	v := new(VideoUpscalerThread)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerTask_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_VideoUpscalerTask_10_list) NewElement() protoreflect.Value {
	v := new(VideoUpscalerThread)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerTask_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_VideoUpscalerTask              protoreflect.MessageDescriptor
	fd_VideoUpscalerTask_taskId       protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_requester    protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_cid          protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_start_frame  protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_end_frame    protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_threadAmount protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_scale        protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_completed    protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_reward       protoreflect.FieldDescriptor
	fd_VideoUpscalerTask_threads      protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_VideoUpscalerTask = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("VideoUpscalerTask")
	fd_VideoUpscalerTask_taskId = md_VideoUpscalerTask.Fields().ByName("taskId")
	fd_VideoUpscalerTask_requester = md_VideoUpscalerTask.Fields().ByName("requester")
	fd_VideoUpscalerTask_cid = md_VideoUpscalerTask.Fields().ByName("cid")
	fd_VideoUpscalerTask_start_frame = md_VideoUpscalerTask.Fields().ByName("start_frame")
	fd_VideoUpscalerTask_end_frame = md_VideoUpscalerTask.Fields().ByName("end_frame")
	fd_VideoUpscalerTask_threadAmount = md_VideoUpscalerTask.Fields().ByName("threadAmount")
	fd_VideoUpscalerTask_scale = md_VideoUpscalerTask.Fields().ByName("scale")
	fd_VideoUpscalerTask_completed = md_VideoUpscalerTask.Fields().ByName("completed")
	fd_VideoUpscalerTask_reward = md_VideoUpscalerTask.Fields().ByName("reward")
	fd_VideoUpscalerTask_threads = md_VideoUpscalerTask.Fields().ByName("threads")
}

var _ protoreflect.Message = (*fastReflection_VideoUpscalerTask)(nil)

type fastReflection_VideoUpscalerTask VideoUpscalerTask

func (x *VideoUpscalerTask) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VideoUpscalerTask)(x)
}

func (x *VideoUpscalerTask) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VideoUpscalerTask_messageType fastReflection_VideoUpscalerTask_messageType
var _ protoreflect.MessageType = fastReflection_VideoUpscalerTask_messageType{}

type fastReflection_VideoUpscalerTask_messageType struct{}

func (x fastReflection_VideoUpscalerTask_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VideoUpscalerTask)(nil)
}
func (x fastReflection_VideoUpscalerTask_messageType) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerTask)
}
func (x fastReflection_VideoUpscalerTask_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerTask
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VideoUpscalerTask) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerTask
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VideoUpscalerTask) Type() protoreflect.MessageType {
	return _fastReflection_VideoUpscalerTask_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VideoUpscalerTask) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerTask)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VideoUpscalerTask) Interface() protoreflect.ProtoMessage {
	return (*VideoUpscalerTask)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VideoUpscalerTask) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TaskId != "" {
		value := protoreflect.ValueOfString(x.TaskId)
		if !f(fd_VideoUpscalerTask_taskId, value) {
			return
		}
	}
	if x.Requester != "" {
		value := protoreflect.ValueOfString(x.Requester)
		if !f(fd_VideoUpscalerTask_requester, value) {
			return
		}
	}
	if x.Cid != "" {
		value := protoreflect.ValueOfString(x.Cid)
		if !f(fd_VideoUpscalerTask_cid, value) {
			return
		}
	}
	if x.StartFrame != int32(0) {
		value := protoreflect.ValueOfInt32(x.StartFrame)
		if !f(fd_VideoUpscalerTask_start_frame, value) {
			return
		}
	}
	if x.EndFrame != int32(0) {
		value := protoreflect.ValueOfInt32(x.EndFrame)
		if !f(fd_VideoUpscalerTask_end_frame, value) {
			return
		}
	}
	if x.ThreadAmount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ThreadAmount)
		if !f(fd_VideoUpscalerTask_threadAmount, value) {
			return
		}
	}
	if x.Scale != int32(0) {
		value := protoreflect.ValueOfInt32(x.Scale)
		if !f(fd_VideoUpscalerTask_scale, value) {
			return
		}
	}
	if x.Completed != false {
		value := protoreflect.ValueOfBool(x.Completed)
		if !f(fd_VideoUpscalerTask_completed, value) {
			return
		}
	}
	if x.Reward != nil {
		value := protoreflect.ValueOfMessage(x.Reward.ProtoReflect())
		if !f(fd_VideoUpscalerTask_reward, value) {
			return
		}
	}
	if len(x.Threads) != 0 {
		value := protoreflect.ValueOfList(&_VideoUpscalerTask_10_list{list: &x.Threads})
		if !f(fd_VideoUpscalerTask_threads, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VideoUpscalerTask) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTask.taskId":
		return x.TaskId != ""
	case "janction.videoUpscaler.v1.VideoUpscalerTask.requester":
		return x.Requester != ""
	case "janction.videoUpscaler.v1.VideoUpscalerTask.cid":
		return x.Cid != ""
	case "janction.videoUpscaler.v1.VideoUpscalerTask.start_frame":
		return x.StartFrame != int32(0)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.end_frame":
		return x.EndFrame != int32(0)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threadAmount":
		return x.ThreadAmount != int32(0)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.scale":
		return x.Scale != int32(0)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.completed":
		return x.Completed != false
	case "janction.videoUpscaler.v1.VideoUpscalerTask.reward":
		return x.Reward != nil
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threads":
		return len(x.Threads) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerTask) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTask.taskId":
		x.TaskId = ""
	case "janction.videoUpscaler.v1.VideoUpscalerTask.requester":
		x.Requester = ""
	case "janction.videoUpscaler.v1.VideoUpscalerTask.cid":
		x.Cid = ""
	case "janction.videoUpscaler.v1.VideoUpscalerTask.start_frame":
		x.StartFrame = int32(0)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.end_frame":
		x.EndFrame = int32(0)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threadAmount":
		x.ThreadAmount = int32(0)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.scale":
		x.Scale = int32(0)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.completed":
		x.Completed = false
	case "janction.videoUpscaler.v1.VideoUpscalerTask.reward":
		x.Reward = nil
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threads":
		x.Threads = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VideoUpscalerTask) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTask.taskId":
		value := x.TaskId
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.requester":
		value := x.Requester
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.cid":
		value := x.Cid
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.start_frame":
		value := x.StartFrame
		return protoreflect.ValueOfInt32(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.end_frame":
		value := x.EndFrame
		return protoreflect.ValueOfInt32(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threadAmount":
		value := x.ThreadAmount
		return protoreflect.ValueOfInt32(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.scale":
		value := x.Scale
		return protoreflect.ValueOfInt32(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.completed":
		value := x.Completed
		return protoreflect.ValueOfBool(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.reward":
		value := x.Reward
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threads":
		if len(x.Threads) == 0 {
			return protoreflect.ValueOfList(&_VideoUpscalerTask_10_list{})
		}
		listValue := &_VideoUpscalerTask_10_list{list: &x.Threads}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTask does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerTask) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTask.taskId":
		x.TaskId = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.requester":
		x.Requester = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.cid":
		x.Cid = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.start_frame":
		x.StartFrame = int32(value.Int())
	case "janction.videoUpscaler.v1.VideoUpscalerTask.end_frame":
		x.EndFrame = int32(value.Int())
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threadAmount":
		x.ThreadAmount = int32(value.Int())
	case "janction.videoUpscaler.v1.VideoUpscalerTask.scale":
		x.Scale = int32(value.Int())
	case "janction.videoUpscaler.v1.VideoUpscalerTask.completed":
		x.Completed = value.Bool()
	case "janction.videoUpscaler.v1.VideoUpscalerTask.reward":
		x.Reward = value.Message().Interface().(*v1beta1.Coin)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threads":
		lv := value.List()
		clv := lv.(*_VideoUpscalerTask_10_list)
		x.Threads = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerTask) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTask.reward":
		if x.Reward == nil {
			x.Reward = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Reward.ProtoReflect())
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threads":
		if x.Threads == nil {
			x.Threads = []*VideoUpscalerThread{}
		}
		value := &_VideoUpscalerTask_10_list{list: &x.Threads}
		return protoreflect.ValueOfList(value)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.taskId":
		panic(fmt.Errorf("field taskId of message janction.videoUpscaler.v1.VideoUpscalerTask is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.requester":
		panic(fmt.Errorf("field requester of message janction.videoUpscaler.v1.VideoUpscalerTask is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.cid":
		panic(fmt.Errorf("field cid of message janction.videoUpscaler.v1.VideoUpscalerTask is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.start_frame":
		panic(fmt.Errorf("field start_frame of message janction.videoUpscaler.v1.VideoUpscalerTask is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.end_frame":
		panic(fmt.Errorf("field end_frame of message janction.videoUpscaler.v1.VideoUpscalerTask is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threadAmount":
		panic(fmt.Errorf("field threadAmount of message janction.videoUpscaler.v1.VideoUpscalerTask is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.scale":
		panic(fmt.Errorf("field scale of message janction.videoUpscaler.v1.VideoUpscalerTask is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.completed":
		panic(fmt.Errorf("field completed of message janction.videoUpscaler.v1.VideoUpscalerTask is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VideoUpscalerTask) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTask.taskId":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerTask.requester":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerTask.cid":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerTask.start_frame":
		return protoreflect.ValueOfInt32(int32(0))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.end_frame":
		return protoreflect.ValueOfInt32(int32(0))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threadAmount":
		return protoreflect.ValueOfInt32(int32(0))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.scale":
		return protoreflect.ValueOfInt32(int32(0))
	case "janction.videoUpscaler.v1.VideoUpscalerTask.completed":
		return protoreflect.ValueOfBool(false)
	case "janction.videoUpscaler.v1.VideoUpscalerTask.reward":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "janction.videoUpscaler.v1.VideoUpscalerTask.threads":
		list := []*VideoUpscalerThread{}
		return protoreflect.ValueOfList(&_VideoUpscalerTask_10_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VideoUpscalerTask) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.VideoUpscalerTask", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VideoUpscalerTask) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerTask) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VideoUpscalerTask) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VideoUpscalerTask) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VideoUpscalerTask)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TaskId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Requester)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Cid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartFrame != 0 {
			n += 1 + runtime.Sov(uint64(x.StartFrame))
		}
		if x.EndFrame != 0 {
			n += 1 + runtime.Sov(uint64(x.EndFrame))
		}
		if x.ThreadAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.ThreadAmount))
		}
		if x.Scale != 0 {
			n += 1 + runtime.Sov(uint64(x.Scale))
		}
		if x.Completed {
			n += 2
		}
		if x.Reward != nil {
			l = options.Size(x.Reward)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Threads) > 0 {
			for _, e := range x.Threads {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerTask)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Threads) > 0 {
			for iNdEx := len(x.Threads) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Threads[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.Reward != nil {
			encoded, err := options.Marshal(x.Reward)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.Completed {
			i--
			if x.Completed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.Scale != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Scale))
			i--
			dAtA[i] = 0x38
		}
		if x.ThreadAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ThreadAmount))
			i--
			dAtA[i] = 0x30
		}
		if x.EndFrame != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndFrame))
			i--
			dAtA[i] = 0x28
		}
		if x.StartFrame != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartFrame))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Cid) > 0 {
			i -= len(x.Cid)
			copy(dAtA[i:], x.Cid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Cid)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Requester) > 0 {
			i -= len(x.Requester)
			copy(dAtA[i:], x.Requester)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Requester)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TaskId) > 0 {
			i -= len(x.TaskId)
			copy(dAtA[i:], x.TaskId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TaskId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerTask)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerTask: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerTask: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TaskId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Requester = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Cid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartFrame", wireType)
				}
				x.StartFrame = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartFrame |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndFrame", wireType)
				}
				x.EndFrame = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndFrame |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ThreadAmount", wireType)
				}
				x.ThreadAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ThreadAmount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
				}
				x.Scale = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Scale |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Completed = bool(v != 0)
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Reward == nil {
					x.Reward = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Reward); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Threads = append(x.Threads, &VideoUpscalerThread{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Threads[len(x.Threads)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_VideoUpscalerThread_7_list)(nil)

type _VideoUpscalerThread_7_list struct {
	list *[]string
}

func (x *_VideoUpscalerThread_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VideoUpscalerThread_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_VideoUpscalerThread_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_VideoUpscalerThread_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_VideoUpscalerThread_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message VideoUpscalerThread at list field Workers as it is not of Message kind"))
}

func (x *_VideoUpscalerThread_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_VideoUpscalerThread_7_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_VideoUpscalerThread_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_VideoUpscalerThread_9_list)(nil)

type _VideoUpscalerThread_9_list struct {
	list *[]*VideoUpscalerThread_Validation
}

func (x *_VideoUpscalerThread_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VideoUpscalerThread_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_VideoUpscalerThread_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerThread_Validation)
	(*x.list)[i] = concreteValue
}

func (x *_VideoUpscalerThread_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerThread_Validation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_VideoUpscalerThread_9_list) AppendMutable() protoreflect.Value {
	v := new(VideoUpscalerThread_Validation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerThread_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_VideoUpscalerThread_9_list) NewElement() protoreflect.Value {
	v := new(VideoUpscalerThread_Validation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerThread_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_VideoUpscalerThread                        protoreflect.MessageDescriptor
	fd_VideoUpscalerThread_thread_id              protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_task_id                protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_start_frame            protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_end_frame              protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_scale                  protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_completed              protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_workers                protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_solution               protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_validations            protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_average_render_seconds protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_VideoUpscalerThread = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("VideoUpscalerThread")
	fd_VideoUpscalerThread_thread_id = md_VideoUpscalerThread.Fields().ByName("thread_id")
	fd_VideoUpscalerThread_task_id = md_VideoUpscalerThread.Fields().ByName("task_id")
	fd_VideoUpscalerThread_start_frame = md_VideoUpscalerThread.Fields().ByName("start_frame")
	fd_VideoUpscalerThread_end_frame = md_VideoUpscalerThread.Fields().ByName("end_frame")
	fd_VideoUpscalerThread_scale = md_VideoUpscalerThread.Fields().ByName("scale")
	fd_VideoUpscalerThread_completed = md_VideoUpscalerThread.Fields().ByName("completed")
	fd_VideoUpscalerThread_workers = md_VideoUpscalerThread.Fields().ByName("workers")
	fd_VideoUpscalerThread_solution = md_VideoUpscalerThread.Fields().ByName("solution")
	fd_VideoUpscalerThread_validations = md_VideoUpscalerThread.Fields().ByName("validations")
	fd_VideoUpscalerThread_average_render_seconds = md_VideoUpscalerThread.Fields().ByName("average_render_seconds")
}

var _ protoreflect.Message = (*fastReflection_VideoUpscalerThread)(nil)

type fastReflection_VideoUpscalerThread VideoUpscalerThread

func (x *VideoUpscalerThread) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VideoUpscalerThread)(x)
}

func (x *VideoUpscalerThread) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VideoUpscalerThread_messageType fastReflection_VideoUpscalerThread_messageType
var _ protoreflect.MessageType = fastReflection_VideoUpscalerThread_messageType{}

type fastReflection_VideoUpscalerThread_messageType struct{}

func (x fastReflection_VideoUpscalerThread_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VideoUpscalerThread)(nil)
}
func (x fastReflection_VideoUpscalerThread_messageType) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerThread)
}
func (x fastReflection_VideoUpscalerThread_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerThread
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VideoUpscalerThread) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerThread
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VideoUpscalerThread) Type() protoreflect.MessageType {
	return _fastReflection_VideoUpscalerThread_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VideoUpscalerThread) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerThread)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VideoUpscalerThread) Interface() protoreflect.ProtoMessage {
	return (*VideoUpscalerThread)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VideoUpscalerThread) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ThreadId != "" {
		value := protoreflect.ValueOfString(x.ThreadId)
		if !f(fd_VideoUpscalerThread_thread_id, value) {
			return
		}
	}
	if x.TaskId != "" {
		value := protoreflect.ValueOfString(x.TaskId)
		if !f(fd_VideoUpscalerThread_task_id, value) {
			return
		}
	}
	if x.StartFrame != int64(0) {
		value := protoreflect.ValueOfInt64(x.StartFrame)
		if !f(fd_VideoUpscalerThread_start_frame, value) {
			return
		}
	}
	if x.EndFrame != int64(0) {
		value := protoreflect.ValueOfInt64(x.EndFrame)
		if !f(fd_VideoUpscalerThread_end_frame, value) {
			return
		}
	}
	if x.Scale != int64(0) {
		value := protoreflect.ValueOfInt64(x.Scale)
		if !f(fd_VideoUpscalerThread_scale, value) {
			return
		}
	}
	if x.Completed != false {
		value := protoreflect.ValueOfBool(x.Completed)
		if !f(fd_VideoUpscalerThread_completed, value) {
			return
		}
	}
	if len(x.Workers) != 0 {
		value := protoreflect.ValueOfList(&_VideoUpscalerThread_7_list{list: &x.Workers})
		if !f(fd_VideoUpscalerThread_workers, value) {
			return
		}
	}
	if x.Solution != nil {
		value := protoreflect.ValueOfMessage(x.Solution.ProtoReflect())
		if !f(fd_VideoUpscalerThread_solution, value) {
			return
		}
	}
	if len(x.Validations) != 0 {
		value := protoreflect.ValueOfList(&_VideoUpscalerThread_9_list{list: &x.Validations})
		if !f(fd_VideoUpscalerThread_validations, value) {
			return
		}
	}
	if x.AverageRenderSeconds != int64(0) {
		value := protoreflect.ValueOfInt64(x.AverageRenderSeconds)
		if !f(fd_VideoUpscalerThread_average_render_seconds, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VideoUpscalerThread) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.thread_id":
		return x.ThreadId != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.task_id":
		return x.TaskId != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.start_frame":
		return x.StartFrame != int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.end_frame":
		return x.EndFrame != int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.scale":
		return x.Scale != int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.completed":
		return x.Completed != false
	case "janction.videoUpscaler.v1.VideoUpscalerThread.workers":
		return len(x.Workers) != 0
	case "janction.videoUpscaler.v1.VideoUpscalerThread.solution":
		return x.Solution != nil
	case "janction.videoUpscaler.v1.VideoUpscalerThread.validations":
		return len(x.Validations) != 0
	case "janction.videoUpscaler.v1.VideoUpscalerThread.average_render_seconds":
		return x.AverageRenderSeconds != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.thread_id":
		x.ThreadId = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.task_id":
		x.TaskId = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.start_frame":
		x.StartFrame = int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.end_frame":
		x.EndFrame = int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.scale":
		x.Scale = int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.completed":
		x.Completed = false
	case "janction.videoUpscaler.v1.VideoUpscalerThread.workers":
		x.Workers = nil
	case "janction.videoUpscaler.v1.VideoUpscalerThread.solution":
		x.Solution = nil
	case "janction.videoUpscaler.v1.VideoUpscalerThread.validations":
		x.Validations = nil
	case "janction.videoUpscaler.v1.VideoUpscalerThread.average_render_seconds":
		x.AverageRenderSeconds = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VideoUpscalerThread) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.thread_id":
		value := x.ThreadId
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.task_id":
		value := x.TaskId
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.start_frame":
		value := x.StartFrame
		return protoreflect.ValueOfInt64(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.end_frame":
		value := x.EndFrame
		return protoreflect.ValueOfInt64(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.scale":
		value := x.Scale
		return protoreflect.ValueOfInt64(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.completed":
		value := x.Completed
		return protoreflect.ValueOfBool(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.workers":
		if len(x.Workers) == 0 {
			return protoreflect.ValueOfList(&_VideoUpscalerThread_7_list{})
		}
		listValue := &_VideoUpscalerThread_7_list{list: &x.Workers}
		return protoreflect.ValueOfList(listValue)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.solution":
		value := x.Solution
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "janction.videoUpscaler.v1.VideoUpscalerThread.validations":
		if len(x.Validations) == 0 {
			return protoreflect.ValueOfList(&_VideoUpscalerThread_9_list{})
		}
		listValue := &_VideoUpscalerThread_9_list{list: &x.Validations}
		return protoreflect.ValueOfList(listValue)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.average_render_seconds":
		value := x.AverageRenderSeconds
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.thread_id":
		x.ThreadId = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.task_id":
		x.TaskId = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.start_frame":
		x.StartFrame = value.Int()
	case "janction.videoUpscaler.v1.VideoUpscalerThread.end_frame":
		x.EndFrame = value.Int()
	case "janction.videoUpscaler.v1.VideoUpscalerThread.scale":
		x.Scale = value.Int()
	case "janction.videoUpscaler.v1.VideoUpscalerThread.completed":
		x.Completed = value.Bool()
	case "janction.videoUpscaler.v1.VideoUpscalerThread.workers":
		lv := value.List()
		clv := lv.(*_VideoUpscalerThread_7_list)
		x.Workers = *clv.list
	case "janction.videoUpscaler.v1.VideoUpscalerThread.solution":
		x.Solution = value.Message().Interface().(*VideoUpscalerThread_Solution)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.validations":
		lv := value.List()
		clv := lv.(*_VideoUpscalerThread_9_list)
		x.Validations = *clv.list
	case "janction.videoUpscaler.v1.VideoUpscalerThread.average_render_seconds":
		x.AverageRenderSeconds = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.workers":
		if x.Workers == nil {
			x.Workers = []string{}
		}
		value := &_VideoUpscalerThread_7_list{list: &x.Workers}
		return protoreflect.ValueOfList(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.solution":
		if x.Solution == nil {
			x.Solution = new(VideoUpscalerThread_Solution)
		}
		return protoreflect.ValueOfMessage(x.Solution.ProtoReflect())
	case "janction.videoUpscaler.v1.VideoUpscalerThread.validations":
		if x.Validations == nil {
			x.Validations = []*VideoUpscalerThread_Validation{}
		}
		value := &_VideoUpscalerThread_9_list{list: &x.Validations}
		return protoreflect.ValueOfList(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.thread_id":
		panic(fmt.Errorf("field thread_id of message janction.videoUpscaler.v1.VideoUpscalerThread is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.task_id":
		panic(fmt.Errorf("field task_id of message janction.videoUpscaler.v1.VideoUpscalerThread is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.start_frame":
		panic(fmt.Errorf("field start_frame of message janction.videoUpscaler.v1.VideoUpscalerThread is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.end_frame":
		panic(fmt.Errorf("field end_frame of message janction.videoUpscaler.v1.VideoUpscalerThread is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.scale":
		panic(fmt.Errorf("field scale of message janction.videoUpscaler.v1.VideoUpscalerThread is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.completed":
		panic(fmt.Errorf("field completed of message janction.videoUpscaler.v1.VideoUpscalerThread is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.average_render_seconds":
		panic(fmt.Errorf("field average_render_seconds of message janction.videoUpscaler.v1.VideoUpscalerThread is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VideoUpscalerThread) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.thread_id":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.task_id":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.start_frame":
		return protoreflect.ValueOfInt64(int64(0))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.end_frame":
		return protoreflect.ValueOfInt64(int64(0))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.scale":
		return protoreflect.ValueOfInt64(int64(0))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.completed":
		return protoreflect.ValueOfBool(false)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.workers":
		list := []string{}
		return protoreflect.ValueOfList(&_VideoUpscalerThread_7_list{list: &list})
	case "janction.videoUpscaler.v1.VideoUpscalerThread.solution":
		m := new(VideoUpscalerThread_Solution)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "janction.videoUpscaler.v1.VideoUpscalerThread.validations":
		list := []*VideoUpscalerThread_Validation{}
		return protoreflect.ValueOfList(&_VideoUpscalerThread_9_list{list: &list})
	case "janction.videoUpscaler.v1.VideoUpscalerThread.average_render_seconds":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VideoUpscalerThread) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.VideoUpscalerThread", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VideoUpscalerThread) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VideoUpscalerThread) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VideoUpscalerThread) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VideoUpscalerThread)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ThreadId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TaskId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartFrame != 0 {
			n += 1 + runtime.Sov(uint64(x.StartFrame))
		}
		if x.EndFrame != 0 {
			n += 1 + runtime.Sov(uint64(x.EndFrame))
		}
		if x.Scale != 0 {
			n += 1 + runtime.Sov(uint64(x.Scale))
		}
		if x.Completed {
			n += 2
		}
		if len(x.Workers) > 0 {
			for _, s := range x.Workers {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Solution != nil {
			l = options.Size(x.Solution)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Validations) > 0 {
			for _, e := range x.Validations {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.AverageRenderSeconds != 0 {
			n += 1 + runtime.Sov(uint64(x.AverageRenderSeconds))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerThread)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AverageRenderSeconds != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AverageRenderSeconds))
			i--
			dAtA[i] = 0x50
		}
		if len(x.Validations) > 0 {
			for iNdEx := len(x.Validations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Validations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if x.Solution != nil {
			encoded, err := options.Marshal(x.Solution)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Workers) > 0 {
			for iNdEx := len(x.Workers) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Workers[iNdEx])
				copy(dAtA[i:], x.Workers[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Workers[iNdEx])))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.Completed {
			i--
			if x.Completed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if x.Scale != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Scale))
			i--
			dAtA[i] = 0x28
		}
		if x.EndFrame != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EndFrame))
			i--
			dAtA[i] = 0x20
		}
		if x.StartFrame != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartFrame))
			i--
			dAtA[i] = 0x18
		}
		if len(x.TaskId) > 0 {
			i -= len(x.TaskId)
			copy(dAtA[i:], x.TaskId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TaskId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ThreadId) > 0 {
			i -= len(x.ThreadId)
			copy(dAtA[i:], x.ThreadId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ThreadId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerThread)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerThread: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerThread: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ThreadId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TaskId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartFrame", wireType)
				}
				x.StartFrame = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartFrame |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndFrame", wireType)
				}
				x.EndFrame = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EndFrame |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
				}
				x.Scale = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Scale |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Completed = bool(v != 0)
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Workers = append(x.Workers, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Solution", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Solution == nil {
					x.Solution = &VideoUpscalerThread_Solution{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Solution); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Validations = append(x.Validations, &VideoUpscalerThread_Validation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Validations[len(x.Validations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AverageRenderSeconds", wireType)
				}
				x.AverageRenderSeconds = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AverageRenderSeconds |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_VideoUpscalerThread_Solution_2_list)(nil)

type _VideoUpscalerThread_Solution_2_list struct {
	list *[]*VideoUpscalerThread_Frame
}

func (x *_VideoUpscalerThread_Solution_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VideoUpscalerThread_Solution_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_VideoUpscalerThread_Solution_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerThread_Frame)
	(*x.list)[i] = concreteValue
}

func (x *_VideoUpscalerThread_Solution_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerThread_Frame)
	*x.list = append(*x.list, concreteValue)
}

func (x *_VideoUpscalerThread_Solution_2_list) AppendMutable() protoreflect.Value {
	v := new(VideoUpscalerThread_Frame)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerThread_Solution_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_VideoUpscalerThread_Solution_2_list) NewElement() protoreflect.Value {
	v := new(VideoUpscalerThread_Frame)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerThread_Solution_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_VideoUpscalerThread_Solution             protoreflect.MessageDescriptor
	fd_VideoUpscalerThread_Solution_proposed_by protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Solution_frames      protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Solution_public_key  protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Solution_dir         protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Solution_accepted    protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_VideoUpscalerThread_Solution = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("VideoUpscalerThread").Messages().ByName("Solution")
	fd_VideoUpscalerThread_Solution_proposed_by = md_VideoUpscalerThread_Solution.Fields().ByName("proposed_by")
	fd_VideoUpscalerThread_Solution_frames = md_VideoUpscalerThread_Solution.Fields().ByName("frames")
	fd_VideoUpscalerThread_Solution_public_key = md_VideoUpscalerThread_Solution.Fields().ByName("public_key")
	fd_VideoUpscalerThread_Solution_dir = md_VideoUpscalerThread_Solution.Fields().ByName("dir")
	fd_VideoUpscalerThread_Solution_accepted = md_VideoUpscalerThread_Solution.Fields().ByName("accepted")
}

var _ protoreflect.Message = (*fastReflection_VideoUpscalerThread_Solution)(nil)

type fastReflection_VideoUpscalerThread_Solution VideoUpscalerThread_Solution

func (x *VideoUpscalerThread_Solution) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VideoUpscalerThread_Solution)(x)
}

func (x *VideoUpscalerThread_Solution) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VideoUpscalerThread_Solution_messageType fastReflection_VideoUpscalerThread_Solution_messageType
var _ protoreflect.MessageType = fastReflection_VideoUpscalerThread_Solution_messageType{}

type fastReflection_VideoUpscalerThread_Solution_messageType struct{}

func (x fastReflection_VideoUpscalerThread_Solution_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VideoUpscalerThread_Solution)(nil)
}
func (x fastReflection_VideoUpscalerThread_Solution_messageType) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerThread_Solution)
}
func (x fastReflection_VideoUpscalerThread_Solution_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerThread_Solution
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VideoUpscalerThread_Solution) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerThread_Solution
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VideoUpscalerThread_Solution) Type() protoreflect.MessageType {
	return _fastReflection_VideoUpscalerThread_Solution_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VideoUpscalerThread_Solution) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerThread_Solution)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VideoUpscalerThread_Solution) Interface() protoreflect.ProtoMessage {
	return (*VideoUpscalerThread_Solution)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VideoUpscalerThread_Solution) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ProposedBy != "" {
		value := protoreflect.ValueOfString(x.ProposedBy)
		if !f(fd_VideoUpscalerThread_Solution_proposed_by, value) {
			return
		}
	}
	if len(x.Frames) != 0 {
		value := protoreflect.ValueOfList(&_VideoUpscalerThread_Solution_2_list{list: &x.Frames})
		if !f(fd_VideoUpscalerThread_Solution_frames, value) {
			return
		}
	}
	if x.PublicKey != "" {
		value := protoreflect.ValueOfString(x.PublicKey)
		if !f(fd_VideoUpscalerThread_Solution_public_key, value) {
			return
		}
	}
	if x.Dir != "" {
		value := protoreflect.ValueOfString(x.Dir)
		if !f(fd_VideoUpscalerThread_Solution_dir, value) {
			return
		}
	}
	if x.Accepted != false {
		value := protoreflect.ValueOfBool(x.Accepted)
		if !f(fd_VideoUpscalerThread_Solution_accepted, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VideoUpscalerThread_Solution) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.proposed_by":
		return x.ProposedBy != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.frames":
		return len(x.Frames) != 0
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.public_key":
		return x.PublicKey != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.dir":
		return x.Dir != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.accepted":
		return x.Accepted != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Solution"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Solution does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Solution) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.proposed_by":
		x.ProposedBy = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.frames":
		x.Frames = nil
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.public_key":
		x.PublicKey = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.dir":
		x.Dir = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.accepted":
		x.Accepted = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Solution"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Solution does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VideoUpscalerThread_Solution) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.proposed_by":
		value := x.ProposedBy
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.frames":
		if len(x.Frames) == 0 {
			return protoreflect.ValueOfList(&_VideoUpscalerThread_Solution_2_list{})
		}
		listValue := &_VideoUpscalerThread_Solution_2_list{list: &x.Frames}
		return protoreflect.ValueOfList(listValue)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.public_key":
		value := x.PublicKey
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.dir":
		value := x.Dir
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.accepted":
		value := x.Accepted
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Solution"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Solution does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Solution) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.proposed_by":
		x.ProposedBy = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.frames":
		lv := value.List()
		clv := lv.(*_VideoUpscalerThread_Solution_2_list)
		x.Frames = *clv.list
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.public_key":
		x.PublicKey = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.dir":
		x.Dir = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.accepted":
		x.Accepted = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Solution"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Solution does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Solution) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.frames":
		if x.Frames == nil {
			x.Frames = []*VideoUpscalerThread_Frame{}
		}
		value := &_VideoUpscalerThread_Solution_2_list{list: &x.Frames}
		return protoreflect.ValueOfList(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.proposed_by":
		panic(fmt.Errorf("field proposed_by of message janction.videoUpscaler.v1.VideoUpscalerThread.Solution is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.public_key":
		panic(fmt.Errorf("field public_key of message janction.videoUpscaler.v1.VideoUpscalerThread.Solution is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.dir":
		panic(fmt.Errorf("field dir of message janction.videoUpscaler.v1.VideoUpscalerThread.Solution is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.accepted":
		panic(fmt.Errorf("field accepted of message janction.videoUpscaler.v1.VideoUpscalerThread.Solution is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Solution"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Solution does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VideoUpscalerThread_Solution) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.proposed_by":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.frames":
		list := []*VideoUpscalerThread_Frame{}
		return protoreflect.ValueOfList(&_VideoUpscalerThread_Solution_2_list{list: &list})
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.public_key":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.dir":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Solution.accepted":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Solution"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Solution does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VideoUpscalerThread_Solution) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.VideoUpscalerThread.Solution", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VideoUpscalerThread_Solution) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Solution) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VideoUpscalerThread_Solution) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VideoUpscalerThread_Solution) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VideoUpscalerThread_Solution)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ProposedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Frames) > 0 {
			for _, e := range x.Frames {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Dir)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Accepted {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerThread_Solution)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Accepted {
			i--
			if x.Accepted {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if len(x.Dir) > 0 {
			i -= len(x.Dir)
			copy(dAtA[i:], x.Dir)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Dir)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PublicKey) > 0 {
			i -= len(x.PublicKey)
			copy(dAtA[i:], x.PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicKey)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Frames) > 0 {
			for iNdEx := len(x.Frames) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Frames[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.ProposedBy) > 0 {
			i -= len(x.ProposedBy)
			copy(dAtA[i:], x.ProposedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProposedBy)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerThread_Solution)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerThread_Solution: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerThread_Solution: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProposedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Frames", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Frames = append(x.Frames, &VideoUpscalerThread_Frame{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Frames[len(x.Frames)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Dir = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Accepted = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_VideoUpscalerThread_Validation_2_list)(nil)

type _VideoUpscalerThread_Validation_2_list struct {
	list *[]*VideoUpscalerThread_Frame
}

func (x *_VideoUpscalerThread_Validation_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VideoUpscalerThread_Validation_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_VideoUpscalerThread_Validation_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerThread_Frame)
	(*x.list)[i] = concreteValue
}

func (x *_VideoUpscalerThread_Validation_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerThread_Frame)
	*x.list = append(*x.list, concreteValue)
}

func (x *_VideoUpscalerThread_Validation_2_list) AppendMutable() protoreflect.Value {
	v := new(VideoUpscalerThread_Frame)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerThread_Validation_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_VideoUpscalerThread_Validation_2_list) NewElement() protoreflect.Value {
	v := new(VideoUpscalerThread_Frame)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerThread_Validation_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_VideoUpscalerThread_Validation            protoreflect.MessageDescriptor
	fd_VideoUpscalerThread_Validation_validator  protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Validation_frames     protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Validation_public_key protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Validation_is_reverse protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_VideoUpscalerThread_Validation = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("VideoUpscalerThread").Messages().ByName("Validation")
	fd_VideoUpscalerThread_Validation_validator = md_VideoUpscalerThread_Validation.Fields().ByName("validator")
	fd_VideoUpscalerThread_Validation_frames = md_VideoUpscalerThread_Validation.Fields().ByName("frames")
	fd_VideoUpscalerThread_Validation_public_key = md_VideoUpscalerThread_Validation.Fields().ByName("public_key")
	fd_VideoUpscalerThread_Validation_is_reverse = md_VideoUpscalerThread_Validation.Fields().ByName("is_reverse")
}

var _ protoreflect.Message = (*fastReflection_VideoUpscalerThread_Validation)(nil)

type fastReflection_VideoUpscalerThread_Validation VideoUpscalerThread_Validation

func (x *VideoUpscalerThread_Validation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VideoUpscalerThread_Validation)(x)
}

func (x *VideoUpscalerThread_Validation) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VideoUpscalerThread_Validation_messageType fastReflection_VideoUpscalerThread_Validation_messageType
var _ protoreflect.MessageType = fastReflection_VideoUpscalerThread_Validation_messageType{}

type fastReflection_VideoUpscalerThread_Validation_messageType struct{}

func (x fastReflection_VideoUpscalerThread_Validation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VideoUpscalerThread_Validation)(nil)
}
func (x fastReflection_VideoUpscalerThread_Validation_messageType) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerThread_Validation)
}
func (x fastReflection_VideoUpscalerThread_Validation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerThread_Validation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VideoUpscalerThread_Validation) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerThread_Validation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VideoUpscalerThread_Validation) Type() protoreflect.MessageType {
	return _fastReflection_VideoUpscalerThread_Validation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VideoUpscalerThread_Validation) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerThread_Validation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VideoUpscalerThread_Validation) Interface() protoreflect.ProtoMessage {
	return (*VideoUpscalerThread_Validation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VideoUpscalerThread_Validation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Validator != "" {
		value := protoreflect.ValueOfString(x.Validator)
		if !f(fd_VideoUpscalerThread_Validation_validator, value) {
			return
		}
	}
	if len(x.Frames) != 0 {
		value := protoreflect.ValueOfList(&_VideoUpscalerThread_Validation_2_list{list: &x.Frames})
		if !f(fd_VideoUpscalerThread_Validation_frames, value) {
			return
		}
	}
	if x.PublicKey != "" {
		value := protoreflect.ValueOfString(x.PublicKey)
		if !f(fd_VideoUpscalerThread_Validation_public_key, value) {
			return
		}
	}
	if x.IsReverse != false {
		value := protoreflect.ValueOfBool(x.IsReverse)
		if !f(fd_VideoUpscalerThread_Validation_is_reverse, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VideoUpscalerThread_Validation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.validator":
		return x.Validator != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.frames":
		return len(x.Frames) != 0
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.public_key":
		return x.PublicKey != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.is_reverse":
		return x.IsReverse != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Validation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Validation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Validation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.validator":
		x.Validator = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.frames":
		x.Frames = nil
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.public_key":
		x.PublicKey = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.is_reverse":
		x.IsReverse = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Validation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Validation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VideoUpscalerThread_Validation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.validator":
		value := x.Validator
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.frames":
		if len(x.Frames) == 0 {
			return protoreflect.ValueOfList(&_VideoUpscalerThread_Validation_2_list{})
		}
		listValue := &_VideoUpscalerThread_Validation_2_list{list: &x.Frames}
		return protoreflect.ValueOfList(listValue)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.public_key":
		value := x.PublicKey
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.is_reverse":
		value := x.IsReverse
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Validation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Validation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Validation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.validator":
		x.Validator = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.frames":
		lv := value.List()
		clv := lv.(*_VideoUpscalerThread_Validation_2_list)
		x.Frames = *clv.list
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.public_key":
		x.PublicKey = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.is_reverse":
		x.IsReverse = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Validation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Validation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Validation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.frames":
		if x.Frames == nil {
			x.Frames = []*VideoUpscalerThread_Frame{}
		}
		value := &_VideoUpscalerThread_Validation_2_list{list: &x.Frames}
		return protoreflect.ValueOfList(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.validator":
		panic(fmt.Errorf("field validator of message janction.videoUpscaler.v1.VideoUpscalerThread.Validation is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.public_key":
		panic(fmt.Errorf("field public_key of message janction.videoUpscaler.v1.VideoUpscalerThread.Validation is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.is_reverse":
		panic(fmt.Errorf("field is_reverse of message janction.videoUpscaler.v1.VideoUpscalerThread.Validation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Validation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Validation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VideoUpscalerThread_Validation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.validator":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.frames":
		list := []*VideoUpscalerThread_Frame{}
		return protoreflect.ValueOfList(&_VideoUpscalerThread_Validation_2_list{list: &list})
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.public_key":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Validation.is_reverse":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Validation"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Validation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VideoUpscalerThread_Validation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.VideoUpscalerThread.Validation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VideoUpscalerThread_Validation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Validation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VideoUpscalerThread_Validation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VideoUpscalerThread_Validation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VideoUpscalerThread_Validation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Validator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Frames) > 0 {
			for _, e := range x.Frames {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.PublicKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsReverse {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerThread_Validation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsReverse {
			i--
			if x.IsReverse {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x20
		}
		if len(x.PublicKey) > 0 {
			i -= len(x.PublicKey)
			copy(dAtA[i:], x.PublicKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PublicKey)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Frames) > 0 {
			for iNdEx := len(x.Frames) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Frames[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Validator) > 0 {
			i -= len(x.Validator)
			copy(dAtA[i:], x.Validator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Validator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerThread_Validation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerThread_Validation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerThread_Validation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Validator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Frames", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Frames = append(x.Frames, &VideoUpscalerThread_Frame{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Frames[len(x.Frames)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PublicKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsReverse", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsReverse = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_VideoUpscalerThread_Frame              protoreflect.MessageDescriptor
	fd_VideoUpscalerThread_Frame_filename     protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Frame_signature    protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Frame_cid          protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Frame_hash         protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Frame_validCount   protoreflect.FieldDescriptor
	fd_VideoUpscalerThread_Frame_invalidCount protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_VideoUpscalerThread_Frame = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("VideoUpscalerThread").Messages().ByName("Frame")
	fd_VideoUpscalerThread_Frame_filename = md_VideoUpscalerThread_Frame.Fields().ByName("filename")
	fd_VideoUpscalerThread_Frame_signature = md_VideoUpscalerThread_Frame.Fields().ByName("signature")
	fd_VideoUpscalerThread_Frame_cid = md_VideoUpscalerThread_Frame.Fields().ByName("cid")
	fd_VideoUpscalerThread_Frame_hash = md_VideoUpscalerThread_Frame.Fields().ByName("hash")
	fd_VideoUpscalerThread_Frame_validCount = md_VideoUpscalerThread_Frame.Fields().ByName("validCount")
	fd_VideoUpscalerThread_Frame_invalidCount = md_VideoUpscalerThread_Frame.Fields().ByName("invalidCount")
}

var _ protoreflect.Message = (*fastReflection_VideoUpscalerThread_Frame)(nil)

type fastReflection_VideoUpscalerThread_Frame VideoUpscalerThread_Frame

func (x *VideoUpscalerThread_Frame) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VideoUpscalerThread_Frame)(x)
}

func (x *VideoUpscalerThread_Frame) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VideoUpscalerThread_Frame_messageType fastReflection_VideoUpscalerThread_Frame_messageType
var _ protoreflect.MessageType = fastReflection_VideoUpscalerThread_Frame_messageType{}

type fastReflection_VideoUpscalerThread_Frame_messageType struct{}

func (x fastReflection_VideoUpscalerThread_Frame_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VideoUpscalerThread_Frame)(nil)
}
func (x fastReflection_VideoUpscalerThread_Frame_messageType) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerThread_Frame)
}
func (x fastReflection_VideoUpscalerThread_Frame_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerThread_Frame
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VideoUpscalerThread_Frame) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerThread_Frame
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VideoUpscalerThread_Frame) Type() protoreflect.MessageType {
	return _fastReflection_VideoUpscalerThread_Frame_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VideoUpscalerThread_Frame) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerThread_Frame)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VideoUpscalerThread_Frame) Interface() protoreflect.ProtoMessage {
	return (*VideoUpscalerThread_Frame)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VideoUpscalerThread_Frame) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Filename != "" {
		value := protoreflect.ValueOfString(x.Filename)
		if !f(fd_VideoUpscalerThread_Frame_filename, value) {
			return
		}
	}
	if x.Signature != "" {
		value := protoreflect.ValueOfString(x.Signature)
		if !f(fd_VideoUpscalerThread_Frame_signature, value) {
			return
		}
	}
	if x.Cid != "" {
		value := protoreflect.ValueOfString(x.Cid)
		if !f(fd_VideoUpscalerThread_Frame_cid, value) {
			return
		}
	}
	if x.Hash != "" {
		value := protoreflect.ValueOfString(x.Hash)
		if !f(fd_VideoUpscalerThread_Frame_hash, value) {
			return
		}
	}
	if x.ValidCount != int64(0) {
		value := protoreflect.ValueOfInt64(x.ValidCount)
		if !f(fd_VideoUpscalerThread_Frame_validCount, value) {
			return
		}
	}
	if x.InvalidCount != int64(0) {
		value := protoreflect.ValueOfInt64(x.InvalidCount)
		if !f(fd_VideoUpscalerThread_Frame_invalidCount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VideoUpscalerThread_Frame) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.filename":
		return x.Filename != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.signature":
		return x.Signature != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.cid":
		return x.Cid != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.hash":
		return x.Hash != ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.validCount":
		return x.ValidCount != int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.invalidCount":
		return x.InvalidCount != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Frame"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Frame does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Frame) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.filename":
		x.Filename = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.signature":
		x.Signature = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.cid":
		x.Cid = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.hash":
		x.Hash = ""
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.validCount":
		x.ValidCount = int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.invalidCount":
		x.InvalidCount = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Frame"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Frame does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VideoUpscalerThread_Frame) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.filename":
		value := x.Filename
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.signature":
		value := x.Signature
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.cid":
		value := x.Cid
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.hash":
		value := x.Hash
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.validCount":
		value := x.ValidCount
		return protoreflect.ValueOfInt64(value)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.invalidCount":
		value := x.InvalidCount
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Frame"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Frame does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Frame) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.filename":
		x.Filename = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.signature":
		x.Signature = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.cid":
		x.Cid = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.hash":
		x.Hash = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.validCount":
		x.ValidCount = value.Int()
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.invalidCount":
		x.InvalidCount = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Frame"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Frame does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Frame) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.filename":
		panic(fmt.Errorf("field filename of message janction.videoUpscaler.v1.VideoUpscalerThread.Frame is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.signature":
		panic(fmt.Errorf("field signature of message janction.videoUpscaler.v1.VideoUpscalerThread.Frame is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.cid":
		panic(fmt.Errorf("field cid of message janction.videoUpscaler.v1.VideoUpscalerThread.Frame is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.hash":
		panic(fmt.Errorf("field hash of message janction.videoUpscaler.v1.VideoUpscalerThread.Frame is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.validCount":
		panic(fmt.Errorf("field validCount of message janction.videoUpscaler.v1.VideoUpscalerThread.Frame is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.invalidCount":
		panic(fmt.Errorf("field invalidCount of message janction.videoUpscaler.v1.VideoUpscalerThread.Frame is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Frame"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Frame does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VideoUpscalerThread_Frame) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.filename":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.signature":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.cid":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.hash":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.validCount":
		return protoreflect.ValueOfInt64(int64(0))
	case "janction.videoUpscaler.v1.VideoUpscalerThread.Frame.invalidCount":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerThread.Frame"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerThread.Frame does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VideoUpscalerThread_Frame) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.VideoUpscalerThread.Frame", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VideoUpscalerThread_Frame) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerThread_Frame) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VideoUpscalerThread_Frame) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VideoUpscalerThread_Frame) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VideoUpscalerThread_Frame)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Filename)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Signature)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Cid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Hash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ValidCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidCount))
		}
		if x.InvalidCount != 0 {
			n += 1 + runtime.Sov(uint64(x.InvalidCount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerThread_Frame)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.InvalidCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InvalidCount))
			i--
			dAtA[i] = 0x30
		}
		if x.ValidCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidCount))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Hash) > 0 {
			i -= len(x.Hash)
			copy(dAtA[i:], x.Hash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Hash)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Cid) > 0 {
			i -= len(x.Cid)
			copy(dAtA[i:], x.Cid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Cid)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Signature) > 0 {
			i -= len(x.Signature)
			copy(dAtA[i:], x.Signature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signature)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Filename) > 0 {
			i -= len(x.Filename)
			copy(dAtA[i:], x.Filename)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Filename)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerThread_Frame)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerThread_Frame: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerThread_Frame: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Filename = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signature = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Cid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Hash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidCount", wireType)
				}
				x.ValidCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidCount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InvalidCount", wireType)
				}
				x.InvalidCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InvalidCount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_VideoUpscalerTaskInfo        protoreflect.MessageDescriptor
	fd_VideoUpscalerTaskInfo_nextId protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_VideoUpscalerTaskInfo = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("VideoUpscalerTaskInfo")
	fd_VideoUpscalerTaskInfo_nextId = md_VideoUpscalerTaskInfo.Fields().ByName("nextId")
}

var _ protoreflect.Message = (*fastReflection_VideoUpscalerTaskInfo)(nil)

type fastReflection_VideoUpscalerTaskInfo VideoUpscalerTaskInfo

func (x *VideoUpscalerTaskInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VideoUpscalerTaskInfo)(x)
}

func (x *VideoUpscalerTaskInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VideoUpscalerTaskInfo_messageType fastReflection_VideoUpscalerTaskInfo_messageType
var _ protoreflect.MessageType = fastReflection_VideoUpscalerTaskInfo_messageType{}

type fastReflection_VideoUpscalerTaskInfo_messageType struct{}

func (x fastReflection_VideoUpscalerTaskInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VideoUpscalerTaskInfo)(nil)
}
func (x fastReflection_VideoUpscalerTaskInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerTaskInfo)
}
func (x fastReflection_VideoUpscalerTaskInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerTaskInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VideoUpscalerTaskInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerTaskInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VideoUpscalerTaskInfo) Type() protoreflect.MessageType {
	return _fastReflection_VideoUpscalerTaskInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VideoUpscalerTaskInfo) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerTaskInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VideoUpscalerTaskInfo) Interface() protoreflect.ProtoMessage {
	return (*VideoUpscalerTaskInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VideoUpscalerTaskInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.NextId != int64(0) {
		value := protoreflect.ValueOfInt64(x.NextId)
		if !f(fd_VideoUpscalerTaskInfo_nextId, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VideoUpscalerTaskInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTaskInfo.nextId":
		return x.NextId != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTaskInfo"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTaskInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerTaskInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTaskInfo.nextId":
		x.NextId = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTaskInfo"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTaskInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VideoUpscalerTaskInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTaskInfo.nextId":
		value := x.NextId
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTaskInfo"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTaskInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerTaskInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTaskInfo.nextId":
		x.NextId = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTaskInfo"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTaskInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerTaskInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTaskInfo.nextId":
		panic(fmt.Errorf("field nextId of message janction.videoUpscaler.v1.VideoUpscalerTaskInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTaskInfo"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTaskInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VideoUpscalerTaskInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerTaskInfo.nextId":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerTaskInfo"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerTaskInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VideoUpscalerTaskInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.VideoUpscalerTaskInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VideoUpscalerTaskInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerTaskInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VideoUpscalerTaskInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VideoUpscalerTaskInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VideoUpscalerTaskInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.NextId != 0 {
			n += 1 + runtime.Sov(uint64(x.NextId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerTaskInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.NextId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NextId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerTaskInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerTaskInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
				}
				x.NextId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NextId |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_IndexedVideoUpscalerTask                   protoreflect.MessageDescriptor
	fd_IndexedVideoUpscalerTask_index             protoreflect.FieldDescriptor
	fd_IndexedVideoUpscalerTask_videoUpscalerTask protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_IndexedVideoUpscalerTask = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("IndexedVideoUpscalerTask")
	fd_IndexedVideoUpscalerTask_index = md_IndexedVideoUpscalerTask.Fields().ByName("index")
	fd_IndexedVideoUpscalerTask_videoUpscalerTask = md_IndexedVideoUpscalerTask.Fields().ByName("videoUpscalerTask")
}

var _ protoreflect.Message = (*fastReflection_IndexedVideoUpscalerTask)(nil)

type fastReflection_IndexedVideoUpscalerTask IndexedVideoUpscalerTask

func (x *IndexedVideoUpscalerTask) ProtoReflect() protoreflect.Message {
	return (*fastReflection_IndexedVideoUpscalerTask)(x)
}

func (x *IndexedVideoUpscalerTask) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_IndexedVideoUpscalerTask_messageType fastReflection_IndexedVideoUpscalerTask_messageType
var _ protoreflect.MessageType = fastReflection_IndexedVideoUpscalerTask_messageType{}

type fastReflection_IndexedVideoUpscalerTask_messageType struct{}

func (x fastReflection_IndexedVideoUpscalerTask_messageType) Zero() protoreflect.Message {
	return (*fastReflection_IndexedVideoUpscalerTask)(nil)
}
func (x fastReflection_IndexedVideoUpscalerTask_messageType) New() protoreflect.Message {
	return new(fastReflection_IndexedVideoUpscalerTask)
}
func (x fastReflection_IndexedVideoUpscalerTask_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_IndexedVideoUpscalerTask
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_IndexedVideoUpscalerTask) Descriptor() protoreflect.MessageDescriptor {
	return md_IndexedVideoUpscalerTask
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_IndexedVideoUpscalerTask) Type() protoreflect.MessageType {
	return _fastReflection_IndexedVideoUpscalerTask_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_IndexedVideoUpscalerTask) New() protoreflect.Message {
	return new(fastReflection_IndexedVideoUpscalerTask)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_IndexedVideoUpscalerTask) Interface() protoreflect.ProtoMessage {
	return (*IndexedVideoUpscalerTask)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_IndexedVideoUpscalerTask) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_IndexedVideoUpscalerTask_index, value) {
			return
		}
	}
	if x.VideoUpscalerTask != nil {
		value := protoreflect.ValueOfMessage(x.VideoUpscalerTask.ProtoReflect())
		if !f(fd_IndexedVideoUpscalerTask_videoUpscalerTask, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_IndexedVideoUpscalerTask) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.index":
		return x.Index != ""
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.videoUpscalerTask":
		return x.VideoUpscalerTask != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.IndexedVideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.IndexedVideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IndexedVideoUpscalerTask) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.index":
		x.Index = ""
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.videoUpscalerTask":
		x.VideoUpscalerTask = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.IndexedVideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.IndexedVideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_IndexedVideoUpscalerTask) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.videoUpscalerTask":
		value := x.VideoUpscalerTask
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.IndexedVideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.IndexedVideoUpscalerTask does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IndexedVideoUpscalerTask) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.index":
		x.Index = value.Interface().(string)
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.videoUpscalerTask":
		x.VideoUpscalerTask = value.Message().Interface().(*VideoUpscalerTask)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.IndexedVideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.IndexedVideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IndexedVideoUpscalerTask) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.videoUpscalerTask":
		if x.VideoUpscalerTask == nil {
			x.VideoUpscalerTask = new(VideoUpscalerTask)
		}
		return protoreflect.ValueOfMessage(x.VideoUpscalerTask.ProtoReflect())
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.index":
		panic(fmt.Errorf("field index of message janction.videoUpscaler.v1.IndexedVideoUpscalerTask is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.IndexedVideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.IndexedVideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_IndexedVideoUpscalerTask) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.index":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.IndexedVideoUpscalerTask.videoUpscalerTask":
		m := new(VideoUpscalerTask)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.IndexedVideoUpscalerTask"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.IndexedVideoUpscalerTask does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_IndexedVideoUpscalerTask) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.IndexedVideoUpscalerTask", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_IndexedVideoUpscalerTask) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IndexedVideoUpscalerTask) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_IndexedVideoUpscalerTask) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_IndexedVideoUpscalerTask) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*IndexedVideoUpscalerTask)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.VideoUpscalerTask != nil {
			l = options.Size(x.VideoUpscalerTask)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*IndexedVideoUpscalerTask)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.VideoUpscalerTask != nil {
			encoded, err := options.Marshal(x.VideoUpscalerTask)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*IndexedVideoUpscalerTask)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IndexedVideoUpscalerTask: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IndexedVideoUpscalerTask: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VideoUpscalerTask", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.VideoUpscalerTask == nil {
					x.VideoUpscalerTask = &VideoUpscalerTask{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VideoUpscalerTask); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_VideoUpscalerLogs_2_list)(nil)

type _VideoUpscalerLogs_2_list struct {
	list *[]*VideoUpscalerLogs_VideoUpscalerLog
}

func (x *_VideoUpscalerLogs_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_VideoUpscalerLogs_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_VideoUpscalerLogs_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerLogs_VideoUpscalerLog)
	(*x.list)[i] = concreteValue
}

func (x *_VideoUpscalerLogs_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VideoUpscalerLogs_VideoUpscalerLog)
	*x.list = append(*x.list, concreteValue)
}

func (x *_VideoUpscalerLogs_2_list) AppendMutable() protoreflect.Value {
	v := new(VideoUpscalerLogs_VideoUpscalerLog)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerLogs_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_VideoUpscalerLogs_2_list) NewElement() protoreflect.Value {
	v := new(VideoUpscalerLogs_VideoUpscalerLog)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_VideoUpscalerLogs_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_VideoUpscalerLogs          protoreflect.MessageDescriptor
	fd_VideoUpscalerLogs_threadId protoreflect.FieldDescriptor
	fd_VideoUpscalerLogs_logs     protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_VideoUpscalerLogs = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("VideoUpscalerLogs")
	fd_VideoUpscalerLogs_threadId = md_VideoUpscalerLogs.Fields().ByName("threadId")
	fd_VideoUpscalerLogs_logs = md_VideoUpscalerLogs.Fields().ByName("logs")
}

var _ protoreflect.Message = (*fastReflection_VideoUpscalerLogs)(nil)

type fastReflection_VideoUpscalerLogs VideoUpscalerLogs

func (x *VideoUpscalerLogs) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VideoUpscalerLogs)(x)
}

func (x *VideoUpscalerLogs) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VideoUpscalerLogs_messageType fastReflection_VideoUpscalerLogs_messageType
var _ protoreflect.MessageType = fastReflection_VideoUpscalerLogs_messageType{}

type fastReflection_VideoUpscalerLogs_messageType struct{}

func (x fastReflection_VideoUpscalerLogs_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VideoUpscalerLogs)(nil)
}
func (x fastReflection_VideoUpscalerLogs_messageType) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerLogs)
}
func (x fastReflection_VideoUpscalerLogs_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerLogs
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VideoUpscalerLogs) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerLogs
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VideoUpscalerLogs) Type() protoreflect.MessageType {
	return _fastReflection_VideoUpscalerLogs_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VideoUpscalerLogs) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerLogs)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VideoUpscalerLogs) Interface() protoreflect.ProtoMessage {
	return (*VideoUpscalerLogs)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VideoUpscalerLogs) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ThreadId != "" {
		value := protoreflect.ValueOfString(x.ThreadId)
		if !f(fd_VideoUpscalerLogs_threadId, value) {
			return
		}
	}
	if len(x.Logs) != 0 {
		value := protoreflect.ValueOfList(&_VideoUpscalerLogs_2_list{list: &x.Logs})
		if !f(fd_VideoUpscalerLogs_logs, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VideoUpscalerLogs) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.threadId":
		return x.ThreadId != ""
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.logs":
		return len(x.Logs) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerLogs) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.threadId":
		x.ThreadId = ""
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.logs":
		x.Logs = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VideoUpscalerLogs) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.threadId":
		value := x.ThreadId
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.logs":
		if len(x.Logs) == 0 {
			return protoreflect.ValueOfList(&_VideoUpscalerLogs_2_list{})
		}
		listValue := &_VideoUpscalerLogs_2_list{list: &x.Logs}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerLogs) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.threadId":
		x.ThreadId = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.logs":
		lv := value.List()
		clv := lv.(*_VideoUpscalerLogs_2_list)
		x.Logs = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerLogs) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.logs":
		if x.Logs == nil {
			x.Logs = []*VideoUpscalerLogs_VideoUpscalerLog{}
		}
		value := &_VideoUpscalerLogs_2_list{list: &x.Logs}
		return protoreflect.ValueOfList(value)
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.threadId":
		panic(fmt.Errorf("field threadId of message janction.videoUpscaler.v1.VideoUpscalerLogs is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VideoUpscalerLogs) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.threadId":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.logs":
		list := []*VideoUpscalerLogs_VideoUpscalerLog{}
		return protoreflect.ValueOfList(&_VideoUpscalerLogs_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VideoUpscalerLogs) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.VideoUpscalerLogs", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VideoUpscalerLogs) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerLogs) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VideoUpscalerLogs) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VideoUpscalerLogs) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VideoUpscalerLogs)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ThreadId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Logs) > 0 {
			for _, e := range x.Logs {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerLogs)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Logs) > 0 {
			for iNdEx := len(x.Logs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Logs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.ThreadId) > 0 {
			i -= len(x.ThreadId)
			copy(dAtA[i:], x.ThreadId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ThreadId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerLogs)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerLogs: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerLogs: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ThreadId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Logs = append(x.Logs, &VideoUpscalerLogs_VideoUpscalerLog{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Logs[len(x.Logs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_VideoUpscalerLogs_VideoUpscalerLog           protoreflect.MessageDescriptor
	fd_VideoUpscalerLogs_VideoUpscalerLog_log       protoreflect.FieldDescriptor
	fd_VideoUpscalerLogs_VideoUpscalerLog_timestamp protoreflect.FieldDescriptor
	fd_VideoUpscalerLogs_VideoUpscalerLog_severity  protoreflect.FieldDescriptor
)

func init() {
	file_janction_videoUpscaler_v1_types_proto_init()
	md_VideoUpscalerLogs_VideoUpscalerLog = File_janction_videoUpscaler_v1_types_proto.Messages().ByName("VideoUpscalerLogs").Messages().ByName("VideoUpscalerLog")
	fd_VideoUpscalerLogs_VideoUpscalerLog_log = md_VideoUpscalerLogs_VideoUpscalerLog.Fields().ByName("log")
	fd_VideoUpscalerLogs_VideoUpscalerLog_timestamp = md_VideoUpscalerLogs_VideoUpscalerLog.Fields().ByName("timestamp")
	fd_VideoUpscalerLogs_VideoUpscalerLog_severity = md_VideoUpscalerLogs_VideoUpscalerLog.Fields().ByName("severity")
}

var _ protoreflect.Message = (*fastReflection_VideoUpscalerLogs_VideoUpscalerLog)(nil)

type fastReflection_VideoUpscalerLogs_VideoUpscalerLog VideoUpscalerLogs_VideoUpscalerLog

func (x *VideoUpscalerLogs_VideoUpscalerLog) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VideoUpscalerLogs_VideoUpscalerLog)(x)
}

func (x *VideoUpscalerLogs_VideoUpscalerLog) slowProtoReflect() protoreflect.Message {
	mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VideoUpscalerLogs_VideoUpscalerLog_messageType fastReflection_VideoUpscalerLogs_VideoUpscalerLog_messageType
var _ protoreflect.MessageType = fastReflection_VideoUpscalerLogs_VideoUpscalerLog_messageType{}

type fastReflection_VideoUpscalerLogs_VideoUpscalerLog_messageType struct{}

func (x fastReflection_VideoUpscalerLogs_VideoUpscalerLog_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VideoUpscalerLogs_VideoUpscalerLog)(nil)
}
func (x fastReflection_VideoUpscalerLogs_VideoUpscalerLog_messageType) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerLogs_VideoUpscalerLog)
}
func (x fastReflection_VideoUpscalerLogs_VideoUpscalerLog_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerLogs_VideoUpscalerLog
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Descriptor() protoreflect.MessageDescriptor {
	return md_VideoUpscalerLogs_VideoUpscalerLog
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Type() protoreflect.MessageType {
	return _fastReflection_VideoUpscalerLogs_VideoUpscalerLog_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) New() protoreflect.Message {
	return new(fastReflection_VideoUpscalerLogs_VideoUpscalerLog)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Interface() protoreflect.ProtoMessage {
	return (*VideoUpscalerLogs_VideoUpscalerLog)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Log != "" {
		value := protoreflect.ValueOfString(x.Log)
		if !f(fd_VideoUpscalerLogs_VideoUpscalerLog_log, value) {
			return
		}
	}
	if x.Timestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.Timestamp)
		if !f(fd_VideoUpscalerLogs_VideoUpscalerLog_timestamp, value) {
			return
		}
	}
	if x.Severity != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Severity))
		if !f(fd_VideoUpscalerLogs_VideoUpscalerLog_severity, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.log":
		return x.Log != ""
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.timestamp":
		return x.Timestamp != int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.severity":
		return x.Severity != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.log":
		x.Log = ""
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.timestamp":
		x.Timestamp = int64(0)
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.severity":
		x.Severity = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.log":
		value := x.Log
		return protoreflect.ValueOfString(value)
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfInt64(value)
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.severity":
		value := x.Severity
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.log":
		x.Log = value.Interface().(string)
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.timestamp":
		x.Timestamp = value.Int()
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.severity":
		x.Severity = (VideoUpscalerLogs_VideoUpscalerLog_SEVERITY)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.log":
		panic(fmt.Errorf("field log of message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.timestamp":
		panic(fmt.Errorf("field timestamp of message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog is not mutable"))
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.severity":
		panic(fmt.Errorf("field severity of message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.log":
		return protoreflect.ValueOfString("")
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	case "janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.severity":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog"))
		}
		panic(fmt.Errorf("message janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VideoUpscalerLogs_VideoUpscalerLog) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VideoUpscalerLogs_VideoUpscalerLog)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Log)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		if x.Severity != 0 {
			n += 1 + runtime.Sov(uint64(x.Severity))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerLogs_VideoUpscalerLog)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Severity != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Severity))
			i--
			dAtA[i] = 0x20
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Log) > 0 {
			i -= len(x.Log)
			copy(dAtA[i:], x.Log)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Log)))
			i--
			dAtA[i] = 0x12
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VideoUpscalerLogs_VideoUpscalerLog)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerLogs_VideoUpscalerLog: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VideoUpscalerLogs_VideoUpscalerLog: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Log = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
				}
				x.Severity = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Severity |= VideoUpscalerLogs_VideoUpscalerLog_SEVERITY(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: janction/videoUpscaler/v1/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoUpscalerLogs_VideoUpscalerLog_SEVERITY int32

const (
	VideoUpscalerLogs_VideoUpscalerLog_INFO    VideoUpscalerLogs_VideoUpscalerLog_SEVERITY = 0
	VideoUpscalerLogs_VideoUpscalerLog_SUCCESS VideoUpscalerLogs_VideoUpscalerLog_SEVERITY = 1
	VideoUpscalerLogs_VideoUpscalerLog_ERROR   VideoUpscalerLogs_VideoUpscalerLog_SEVERITY = 2
)

// Enum value maps for VideoUpscalerLogs_VideoUpscalerLog_SEVERITY.
var (
	VideoUpscalerLogs_VideoUpscalerLog_SEVERITY_name = map[int32]string{
		0: "INFO",
		1: "SUCCESS",
		2: "ERROR",
	}
	VideoUpscalerLogs_VideoUpscalerLog_SEVERITY_value = map[string]int32{
		"INFO":    0,
		"SUCCESS": 1,
		"ERROR":   2,
	}
)

func (x VideoUpscalerLogs_VideoUpscalerLog_SEVERITY) Enum() *VideoUpscalerLogs_VideoUpscalerLog_SEVERITY {
	p := new(VideoUpscalerLogs_VideoUpscalerLog_SEVERITY)
	*p = x
	return p
}

func (x VideoUpscalerLogs_VideoUpscalerLog_SEVERITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoUpscalerLogs_VideoUpscalerLog_SEVERITY) Descriptor() protoreflect.EnumDescriptor {
	return file_janction_videoUpscaler_v1_types_proto_enumTypes[0].Descriptor()
}

func (VideoUpscalerLogs_VideoUpscalerLog_SEVERITY) Type() protoreflect.EnumType {
	return &file_janction_videoUpscaler_v1_types_proto_enumTypes[0]
}

func (x VideoUpscalerLogs_VideoUpscalerLog_SEVERITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoUpscalerLogs_VideoUpscalerLog_SEVERITY.Descriptor instead.
func (VideoUpscalerLogs_VideoUpscalerLog_SEVERITY) EnumDescriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{7, 0, 0}
}

// Params defines the parameters of the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinWorkerStaking    *v1beta1.Coin `protobuf:"bytes,1,opt,name=min_worker_staking,json=minWorkerStaking,proto3" json:"min_worker_staking,omitempty"`
	MaxWorkersPerThread int64         `protobuf:"varint,2,opt,name=max_workers_per_thread,json=maxWorkersPerThread,proto3" json:"max_workers_per_thread,omitempty"`
	MinValidators       int64         `protobuf:"varint,3,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetMinWorkerStaking() *v1beta1.Coin {
	if x != nil {
		return x.MinWorkerStaking
	}
	return nil
}

func (x *Params) GetMaxWorkersPerThread() int64 {
	if x != nil {
		return x.MaxWorkersPerThread
	}
	return 0
}

func (x *Params) GetMinValidators() int64 {
	if x != nil {
		return x.MinValidators
	}
	return 0
}

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params defines all the parameters of the module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// Video Upscaler Task index
	VideoUpscalerTaskInfo *VideoUpscalerTaskInfo `protobuf:"bytes,3,opt,name=videoUpscalerTaskInfo,proto3" json:"videoUpscalerTaskInfo,omitempty"`
	// List of Video Upscaler tasks
	VideoUpscalerTaskList []*IndexedVideoUpscalerTask `protobuf:"bytes,4,rep,name=videoUpscalerTaskList,proto3" json:"videoUpscalerTaskList,omitempty"`
	// List of Workers
	Workers []*Worker `protobuf:"bytes,5,rep,name=workers,proto3" json:"workers,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetVideoUpscalerTaskInfo() *VideoUpscalerTaskInfo {
	if x != nil {
		return x.VideoUpscalerTaskInfo
	}
	return nil
}

func (x *GenesisState) GetVideoUpscalerTaskList() []*IndexedVideoUpscalerTask {
	if x != nil {
		return x.VideoUpscalerTaskList
	}
	return nil
}

func (x *GenesisState) GetWorkers() []*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address            string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Reputation         *Worker_Reputation `protobuf:"bytes,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
	Enabled            bool               `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CurrentTaskId      string             `protobuf:"bytes,5,opt,name=current_task_id,json=currentTaskId,proto3" json:"current_task_id,omitempty"`
	CurrentThreadIndex int32              `protobuf:"varint,6,opt,name=current_thread_index,json=currentThreadIndex,proto3" json:"current_thread_index,omitempty"`
	PublicIp           string             `protobuf:"bytes,7,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	IpfsId             string             `protobuf:"bytes,8,opt,name=ipfs_id,json=ipfsId,proto3" json:"ipfs_id,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *Worker) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Worker) GetReputation() *Worker_Reputation {
	if x != nil {
		return x.Reputation
	}
	return nil
}

func (x *Worker) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Worker) GetCurrentTaskId() string {
	if x != nil {
		return x.CurrentTaskId
	}
	return ""
}

func (x *Worker) GetCurrentThreadIndex() int32 {
	if x != nil {
		return x.CurrentThreadIndex
	}
	return 0
}

func (x *Worker) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *Worker) GetIpfsId() string {
	if x != nil {
		return x.IpfsId
	}
	return ""
}

// Video Upscaler Task
// @cid the IPFS CID submitted by a task requester
type VideoUpscalerTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string                 `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Requester    string                 `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	Cid          string                 `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	StartFrame   int32                  `protobuf:"varint,4,opt,name=start_frame,json=startFrame,proto3" json:"start_frame,omitempty"`
	EndFrame     int32                  `protobuf:"varint,5,opt,name=end_frame,json=endFrame,proto3" json:"end_frame,omitempty"`
	ThreadAmount int32                  `protobuf:"varint,6,opt,name=threadAmount,proto3" json:"threadAmount,omitempty"`
	Scale        int32                  `protobuf:"varint,7,opt,name=scale,proto3" json:"scale,omitempty"`
	Completed    bool                   `protobuf:"varint,8,opt,name=completed,proto3" json:"completed,omitempty"`
	Reward       *v1beta1.Coin          `protobuf:"bytes,9,opt,name=reward,proto3" json:"reward,omitempty"`
	Threads      []*VideoUpscalerThread `protobuf:"bytes,10,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *VideoUpscalerTask) Reset() {
	*x = VideoUpscalerTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpscalerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpscalerTask) ProtoMessage() {}

// Deprecated: Use VideoUpscalerTask.ProtoReflect.Descriptor instead.
func (*VideoUpscalerTask) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *VideoUpscalerTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *VideoUpscalerTask) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *VideoUpscalerTask) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *VideoUpscalerTask) GetStartFrame() int32 {
	if x != nil {
		return x.StartFrame
	}
	return 0
}

func (x *VideoUpscalerTask) GetEndFrame() int32 {
	if x != nil {
		return x.EndFrame
	}
	return 0
}

func (x *VideoUpscalerTask) GetThreadAmount() int32 {
	if x != nil {
		return x.ThreadAmount
	}
	return 0
}

func (x *VideoUpscalerTask) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *VideoUpscalerTask) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *VideoUpscalerTask) GetReward() *v1beta1.Coin {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *VideoUpscalerTask) GetThreads() []*VideoUpscalerThread {
	if x != nil {
		return x.Threads
	}
	return nil
}

// A Video Upscaler Thread is the smallest unit of work for a Task.
// Workers will try to complete a thread as soon as possible to submit first a solution
type VideoUpscalerThread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId             string                            `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	TaskId               string                            `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	StartFrame           int64                             `protobuf:"varint,3,opt,name=start_frame,json=startFrame,proto3" json:"start_frame,omitempty"`
	EndFrame             int64                             `protobuf:"varint,4,opt,name=end_frame,json=endFrame,proto3" json:"end_frame,omitempty"`
	Scale                int64                             `protobuf:"varint,5,opt,name=scale,proto3" json:"scale,omitempty"`
	Completed            bool                              `protobuf:"varint,6,opt,name=completed,proto3" json:"completed,omitempty"`
	Workers              []string                          `protobuf:"bytes,7,rep,name=workers,proto3" json:"workers,omitempty"`
	Solution             *VideoUpscalerThread_Solution     `protobuf:"bytes,8,opt,name=solution,proto3" json:"solution,omitempty"`
	Validations          []*VideoUpscalerThread_Validation `protobuf:"bytes,9,rep,name=validations,proto3" json:"validations,omitempty"`
	AverageRenderSeconds int64                             `protobuf:"varint,10,opt,name=average_render_seconds,json=averageRenderSeconds,proto3" json:"average_render_seconds,omitempty"`
}

func (x *VideoUpscalerThread) Reset() {
	*x = VideoUpscalerThread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpscalerThread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpscalerThread) ProtoMessage() {}

// Deprecated: Use VideoUpscalerThread.ProtoReflect.Descriptor instead.
func (*VideoUpscalerThread) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *VideoUpscalerThread) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *VideoUpscalerThread) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *VideoUpscalerThread) GetStartFrame() int64 {
	if x != nil {
		return x.StartFrame
	}
	return 0
}

func (x *VideoUpscalerThread) GetEndFrame() int64 {
	if x != nil {
		return x.EndFrame
	}
	return 0
}

func (x *VideoUpscalerThread) GetScale() int64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *VideoUpscalerThread) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *VideoUpscalerThread) GetWorkers() []string {
	if x != nil {
		return x.Workers
	}
	return nil
}

func (x *VideoUpscalerThread) GetSolution() *VideoUpscalerThread_Solution {
	if x != nil {
		return x.Solution
	}
	return nil
}

func (x *VideoUpscalerThread) GetValidations() []*VideoUpscalerThread_Validation {
	if x != nil {
		return x.Validations
	}
	return nil
}

func (x *VideoUpscalerThread) GetAverageRenderSeconds() int64 {
	if x != nil {
		return x.AverageRenderSeconds
	}
	return 0
}

// Stores information about the Video Upscaler  task
type VideoUpscalerTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextId int64 `protobuf:"varint,1,opt,name=nextId,proto3" json:"nextId,omitempty"`
}

func (x *VideoUpscalerTaskInfo) Reset() {
	*x = VideoUpscalerTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpscalerTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpscalerTaskInfo) ProtoMessage() {}

// Deprecated: Use VideoUpscalerTaskInfo.ProtoReflect.Descriptor instead.
func (*VideoUpscalerTaskInfo) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *VideoUpscalerTaskInfo) GetNextId() int64 {
	if x != nil {
		return x.NextId
	}
	return 0
}

// Stores the Video Upscaler Task with the index
type IndexedVideoUpscalerTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             string             `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	VideoUpscalerTask *VideoUpscalerTask `protobuf:"bytes,2,opt,name=videoUpscalerTask,proto3" json:"videoUpscalerTask,omitempty"`
}

func (x *IndexedVideoUpscalerTask) Reset() {
	*x = IndexedVideoUpscalerTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedVideoUpscalerTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedVideoUpscalerTask) ProtoMessage() {}

// Deprecated: Use IndexedVideoUpscalerTask.ProtoReflect.Descriptor instead.
func (*IndexedVideoUpscalerTask) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *IndexedVideoUpscalerTask) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *IndexedVideoUpscalerTask) GetVideoUpscalerTask() *VideoUpscalerTask {
	if x != nil {
		return x.VideoUpscalerTask
	}
	return nil
}

type VideoUpscalerLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string                                `protobuf:"bytes,1,opt,name=threadId,proto3" json:"threadId,omitempty"`
	Logs     []*VideoUpscalerLogs_VideoUpscalerLog `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *VideoUpscalerLogs) Reset() {
	*x = VideoUpscalerLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpscalerLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpscalerLogs) ProtoMessage() {}

// Deprecated: Use VideoUpscalerLogs.ProtoReflect.Descriptor instead.
func (*VideoUpscalerLogs) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *VideoUpscalerLogs) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *VideoUpscalerLogs) GetLogs() []*VideoUpscalerLogs_VideoUpscalerLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type Worker_Reputation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Staked          *v1beta1.Coin `protobuf:"bytes,1,opt,name=staked,proto3" json:"staked,omitempty"`
	Points          int64         `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Validations     int32         `protobuf:"varint,3,opt,name=validations,proto3" json:"validations,omitempty"`
	Solutions       int32         `protobuf:"varint,4,opt,name=solutions,proto3" json:"solutions,omitempty"`
	Winnings        *v1beta1.Coin `protobuf:"bytes,5,opt,name=winnings,proto3" json:"winnings,omitempty"`
	RenderDurations []int64       `protobuf:"varint,6,rep,packed,name=render_durations,json=renderDurations,proto3" json:"render_durations,omitempty"`
}

func (x *Worker_Reputation) Reset() {
	*x = Worker_Reputation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker_Reputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker_Reputation) ProtoMessage() {}

// Deprecated: Use Worker_Reputation.ProtoReflect.Descriptor instead.
func (*Worker_Reputation) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Worker_Reputation) GetStaked() *v1beta1.Coin {
	if x != nil {
		return x.Staked
	}
	return nil
}

func (x *Worker_Reputation) GetPoints() int64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Worker_Reputation) GetValidations() int32 {
	if x != nil {
		return x.Validations
	}
	return 0
}

func (x *Worker_Reputation) GetSolutions() int32 {
	if x != nil {
		return x.Solutions
	}
	return 0
}

func (x *Worker_Reputation) GetWinnings() *v1beta1.Coin {
	if x != nil {
		return x.Winnings
	}
	return nil
}

func (x *Worker_Reputation) GetRenderDurations() []int64 {
	if x != nil {
		return x.RenderDurations
	}
	return nil
}

type VideoUpscalerThread_Solution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposedBy string                       `protobuf:"bytes,1,opt,name=proposed_by,json=proposedBy,proto3" json:"proposed_by,omitempty"`
	Frames     []*VideoUpscalerThread_Frame `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
	PublicKey  string                       `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Dir        string                       `protobuf:"bytes,4,opt,name=dir,proto3" json:"dir,omitempty"`
	Accepted   bool                         `protobuf:"varint,5,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (x *VideoUpscalerThread_Solution) Reset() {
	*x = VideoUpscalerThread_Solution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpscalerThread_Solution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpscalerThread_Solution) ProtoMessage() {}

// Deprecated: Use VideoUpscalerThread_Solution.ProtoReflect.Descriptor instead.
func (*VideoUpscalerThread_Solution) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{4, 0}
}

func (x *VideoUpscalerThread_Solution) GetProposedBy() string {
	if x != nil {
		return x.ProposedBy
	}
	return ""
}

func (x *VideoUpscalerThread_Solution) GetFrames() []*VideoUpscalerThread_Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *VideoUpscalerThread_Solution) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *VideoUpscalerThread_Solution) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *VideoUpscalerThread_Solution) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type VideoUpscalerThread_Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator string                       `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Frames    []*VideoUpscalerThread_Frame `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
	PublicKey string                       `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	IsReverse bool                         `protobuf:"varint,4,opt,name=is_reverse,json=isReverse,proto3" json:"is_reverse,omitempty"`
}

func (x *VideoUpscalerThread_Validation) Reset() {
	*x = VideoUpscalerThread_Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpscalerThread_Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpscalerThread_Validation) ProtoMessage() {}

// Deprecated: Use VideoUpscalerThread_Validation.ProtoReflect.Descriptor instead.
func (*VideoUpscalerThread_Validation) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{4, 1}
}

func (x *VideoUpscalerThread_Validation) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *VideoUpscalerThread_Validation) GetFrames() []*VideoUpscalerThread_Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *VideoUpscalerThread_Validation) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *VideoUpscalerThread_Validation) GetIsReverse() bool {
	if x != nil {
		return x.IsReverse
	}
	return false
}

type VideoUpscalerThread_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename     string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Signature    string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Cid          string `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	Hash         string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	ValidCount   int64  `protobuf:"varint,5,opt,name=validCount,proto3" json:"validCount,omitempty"`
	InvalidCount int64  `protobuf:"varint,6,opt,name=invalidCount,proto3" json:"invalidCount,omitempty"`
}

func (x *VideoUpscalerThread_Frame) Reset() {
	*x = VideoUpscalerThread_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpscalerThread_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpscalerThread_Frame) ProtoMessage() {}

// Deprecated: Use VideoUpscalerThread_Frame.ProtoReflect.Descriptor instead.
func (*VideoUpscalerThread_Frame) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{4, 2}
}

func (x *VideoUpscalerThread_Frame) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *VideoUpscalerThread_Frame) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *VideoUpscalerThread_Frame) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *VideoUpscalerThread_Frame) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *VideoUpscalerThread_Frame) GetValidCount() int64 {
	if x != nil {
		return x.ValidCount
	}
	return 0
}

func (x *VideoUpscalerThread_Frame) GetInvalidCount() int64 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

type VideoUpscalerLogs_VideoUpscalerLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log       string                                      `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	Timestamp int64                                       `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Severity  VideoUpscalerLogs_VideoUpscalerLog_SEVERITY `protobuf:"varint,4,opt,name=severity,proto3,enum=janction.videoUpscaler.v1.VideoUpscalerLogs_VideoUpscalerLog_SEVERITY" json:"severity,omitempty"`
}

func (x *VideoUpscalerLogs_VideoUpscalerLog) Reset() {
	*x = VideoUpscalerLogs_VideoUpscalerLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janction_videoUpscaler_v1_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoUpscalerLogs_VideoUpscalerLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoUpscalerLogs_VideoUpscalerLog) ProtoMessage() {}

// Deprecated: Use VideoUpscalerLogs_VideoUpscalerLog.ProtoReflect.Descriptor instead.
func (*VideoUpscalerLogs_VideoUpscalerLog) Descriptor() ([]byte, []int) {
	return file_janction_videoUpscaler_v1_types_proto_rawDescGZIP(), []int{7, 0}
}

func (x *VideoUpscalerLogs_VideoUpscalerLog) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *VideoUpscalerLogs_VideoUpscalerLog) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VideoUpscalerLogs_VideoUpscalerLog) GetSeverity() VideoUpscalerLogs_VideoUpscalerLog_SEVERITY {
	if x != nil {
		return x.Severity
	}
	return VideoUpscalerLogs_VideoUpscalerLog_INFO
}

var File_janction_videoUpscaler_v1_types_proto protoreflect.FileDescriptor

var file_janction_videoUpscaler_v1_types_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x47,
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6c, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x15, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x6f, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x15, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0xb6, 0x04, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6a, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x66, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x66, 0x73, 0x49, 0x64, 0x1a, 0xff,
	0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x77, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x88, 0x03, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x48, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0xa3, 0x08, 0x0a, 0x13,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0xe0, 0x01,
	0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x4c, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x1a, 0xd0, 0x01, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x1a, 0xab, 0x01, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x2f, 0x0a, 0x15, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x60, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xd9, 0x02, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0xd4, 0x01, 0x0a,
	0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x62, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x2e, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x2c, 0x0a, 0x08, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x42, 0x82, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x61, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6a, 0x61, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4a, 0x56, 0x58, 0xaa, 0x02, 0x19, 0x4a, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x4a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x25, 0x4a, 0x61, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x4a, 0x61, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x70, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_janction_videoUpscaler_v1_types_proto_rawDescOnce sync.Once
	file_janction_videoUpscaler_v1_types_proto_rawDescData = file_janction_videoUpscaler_v1_types_proto_rawDesc
)

func file_janction_videoUpscaler_v1_types_proto_rawDescGZIP() []byte {
	file_janction_videoUpscaler_v1_types_proto_rawDescOnce.Do(func() {
		file_janction_videoUpscaler_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_janction_videoUpscaler_v1_types_proto_rawDescData)
	})
	return file_janction_videoUpscaler_v1_types_proto_rawDescData
}

var file_janction_videoUpscaler_v1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_janction_videoUpscaler_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_janction_videoUpscaler_v1_types_proto_goTypes = []interface{}{
	(VideoUpscalerLogs_VideoUpscalerLog_SEVERITY)(0), // 0: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.SEVERITY
	(*Params)(nil),                             // 1: janction.videoUpscaler.v1.Params
	(*GenesisState)(nil),                       // 2: janction.videoUpscaler.v1.GenesisState
	(*Worker)(nil),                             // 3: janction.videoUpscaler.v1.Worker
	(*VideoUpscalerTask)(nil),                  // 4: janction.videoUpscaler.v1.VideoUpscalerTask
	(*VideoUpscalerThread)(nil),                // 5: janction.videoUpscaler.v1.VideoUpscalerThread
	(*VideoUpscalerTaskInfo)(nil),              // 6: janction.videoUpscaler.v1.VideoUpscalerTaskInfo
	(*IndexedVideoUpscalerTask)(nil),           // 7: janction.videoUpscaler.v1.IndexedVideoUpscalerTask
	(*VideoUpscalerLogs)(nil),                  // 8: janction.videoUpscaler.v1.VideoUpscalerLogs
	(*Worker_Reputation)(nil),                  // 9: janction.videoUpscaler.v1.Worker.Reputation
	(*VideoUpscalerThread_Solution)(nil),       // 10: janction.videoUpscaler.v1.VideoUpscalerThread.Solution
	(*VideoUpscalerThread_Validation)(nil),     // 11: janction.videoUpscaler.v1.VideoUpscalerThread.Validation
	(*VideoUpscalerThread_Frame)(nil),          // 12: janction.videoUpscaler.v1.VideoUpscalerThread.Frame
	(*VideoUpscalerLogs_VideoUpscalerLog)(nil), // 13: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog
	(*v1beta1.Coin)(nil),                       // 14: cosmos.base.v1beta1.Coin
}
var file_janction_videoUpscaler_v1_types_proto_depIdxs = []int32{
	14, // 0: janction.videoUpscaler.v1.Params.min_worker_staking:type_name -> cosmos.base.v1beta1.Coin
	1,  // 1: janction.videoUpscaler.v1.GenesisState.params:type_name -> janction.videoUpscaler.v1.Params
	6,  // 2: janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskInfo:type_name -> janction.videoUpscaler.v1.VideoUpscalerTaskInfo
	7,  // 3: janction.videoUpscaler.v1.GenesisState.videoUpscalerTaskList:type_name -> janction.videoUpscaler.v1.IndexedVideoUpscalerTask
	3,  // 4: janction.videoUpscaler.v1.GenesisState.workers:type_name -> janction.videoUpscaler.v1.Worker
	9,  // 5: janction.videoUpscaler.v1.Worker.reputation:type_name -> janction.videoUpscaler.v1.Worker.Reputation
	14, // 6: janction.videoUpscaler.v1.VideoUpscalerTask.reward:type_name -> cosmos.base.v1beta1.Coin
	5,  // 7: janction.videoUpscaler.v1.VideoUpscalerTask.threads:type_name -> janction.videoUpscaler.v1.VideoUpscalerThread
	10, // 8: janction.videoUpscaler.v1.VideoUpscalerThread.solution:type_name -> janction.videoUpscaler.v1.VideoUpscalerThread.Solution
	11, // 9: janction.videoUpscaler.v1.VideoUpscalerThread.validations:type_name -> janction.videoUpscaler.v1.VideoUpscalerThread.Validation
	4,  // 10: janction.videoUpscaler.v1.IndexedVideoUpscalerTask.videoUpscalerTask:type_name -> janction.videoUpscaler.v1.VideoUpscalerTask
	13, // 11: janction.videoUpscaler.v1.VideoUpscalerLogs.logs:type_name -> janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog
	14, // 12: janction.videoUpscaler.v1.Worker.Reputation.staked:type_name -> cosmos.base.v1beta1.Coin
	14, // 13: janction.videoUpscaler.v1.Worker.Reputation.winnings:type_name -> cosmos.base.v1beta1.Coin
	12, // 14: janction.videoUpscaler.v1.VideoUpscalerThread.Solution.frames:type_name -> janction.videoUpscaler.v1.VideoUpscalerThread.Frame
	12, // 15: janction.videoUpscaler.v1.VideoUpscalerThread.Validation.frames:type_name -> janction.videoUpscaler.v1.VideoUpscalerThread.Frame
	0,  // 16: janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.severity:type_name -> janction.videoUpscaler.v1.VideoUpscalerLogs.VideoUpscalerLog.SEVERITY
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_janction_videoUpscaler_v1_types_proto_init() }
func file_janction_videoUpscaler_v1_types_proto_init() {
	if File_janction_videoUpscaler_v1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_janction_videoUpscaler_v1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpscalerTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpscalerThread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpscalerTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedVideoUpscalerTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpscalerLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker_Reputation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpscalerThread_Solution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpscalerThread_Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpscalerThread_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janction_videoUpscaler_v1_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoUpscalerLogs_VideoUpscalerLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_janction_videoUpscaler_v1_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_janction_videoUpscaler_v1_types_proto_goTypes,
		DependencyIndexes: file_janction_videoUpscaler_v1_types_proto_depIdxs,
		EnumInfos:         file_janction_videoUpscaler_v1_types_proto_enumTypes,
		MessageInfos:      file_janction_videoUpscaler_v1_types_proto_msgTypes,
	}.Build()
	File_janction_videoUpscaler_v1_types_proto = out.File
	file_janction_videoUpscaler_v1_types_proto_rawDesc = nil
	file_janction_videoUpscaler_v1_types_proto_goTypes = nil
	file_janction_videoUpscaler_v1_types_proto_depIdxs = nil
}
