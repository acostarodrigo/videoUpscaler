// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: janction/videoUpscaler/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { VideoUpscalerLogs, VideoUpscalerTask, Worker } from "./types";

export const protobufPackage = "janction.videoUpscaler.v1";

/**
 * QueryGetGameRequest is the request type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetVideoUpscalerTaskRequest {
  index: string;
}

/**
 * QueryGetGameResponse is the response type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetVideoUpscalerTaskResponse {
  /** Game defines the game at the requested index. */
  videoUpscalerTask?: VideoUpscalerTask | undefined;
}

/**
 * QueryGetGameRequest is the request type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetVideoUpscalerLogsRequest {
  threadId: string;
}

/**
 * QueryGetGameResponse is the response type for the Query/GetGame RPC
 * method.
 */
export interface QueryGetVideoUpscalerLogsResponse {
  /** Game defines the game at the requested index. */
  videoUpscalerLogs?: VideoUpscalerLogs | undefined;
}

export interface QueryGetPendingVideoUpscalerTaskRequest {
}

export interface QueryGetPendingVideoUpscalerTaskResponse {
  videoUpscalerTasks: VideoUpscalerTask[];
}

export interface QueryGetWorkerRequest {
  worker: string;
}

export interface QueryGetWorkerResponse {
  worker?: Worker | undefined;
}

function createBaseQueryGetVideoUpscalerTaskRequest(): QueryGetVideoUpscalerTaskRequest {
  return { index: "" };
}

export const QueryGetVideoUpscalerTaskRequest: MessageFns<QueryGetVideoUpscalerTaskRequest> = {
  encode(message: QueryGetVideoUpscalerTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== "") {
      writer.uint32(10).string(message.index);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVideoUpscalerTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVideoUpscalerTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVideoUpscalerTaskRequest {
    return { index: isSet(object.index) ? globalThis.String(object.index) : "" };
  },

  toJSON(message: QueryGetVideoUpscalerTaskRequest): unknown {
    const obj: any = {};
    if (message.index !== "") {
      obj.index = message.index;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVideoUpscalerTaskRequest>, I>>(
    base?: I,
  ): QueryGetVideoUpscalerTaskRequest {
    return QueryGetVideoUpscalerTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVideoUpscalerTaskRequest>, I>>(
    object: I,
  ): QueryGetVideoUpscalerTaskRequest {
    const message = createBaseQueryGetVideoUpscalerTaskRequest();
    message.index = object.index ?? "";
    return message;
  },
};

function createBaseQueryGetVideoUpscalerTaskResponse(): QueryGetVideoUpscalerTaskResponse {
  return { videoUpscalerTask: undefined };
}

export const QueryGetVideoUpscalerTaskResponse: MessageFns<QueryGetVideoUpscalerTaskResponse> = {
  encode(message: QueryGetVideoUpscalerTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoUpscalerTask !== undefined) {
      VideoUpscalerTask.encode(message.videoUpscalerTask, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVideoUpscalerTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVideoUpscalerTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoUpscalerTask = VideoUpscalerTask.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVideoUpscalerTaskResponse {
    return {
      videoUpscalerTask: isSet(object.videoUpscalerTask)
        ? VideoUpscalerTask.fromJSON(object.videoUpscalerTask)
        : undefined,
    };
  },

  toJSON(message: QueryGetVideoUpscalerTaskResponse): unknown {
    const obj: any = {};
    if (message.videoUpscalerTask !== undefined) {
      obj.videoUpscalerTask = VideoUpscalerTask.toJSON(message.videoUpscalerTask);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVideoUpscalerTaskResponse>, I>>(
    base?: I,
  ): QueryGetVideoUpscalerTaskResponse {
    return QueryGetVideoUpscalerTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVideoUpscalerTaskResponse>, I>>(
    object: I,
  ): QueryGetVideoUpscalerTaskResponse {
    const message = createBaseQueryGetVideoUpscalerTaskResponse();
    message.videoUpscalerTask = (object.videoUpscalerTask !== undefined && object.videoUpscalerTask !== null)
      ? VideoUpscalerTask.fromPartial(object.videoUpscalerTask)
      : undefined;
    return message;
  },
};

function createBaseQueryGetVideoUpscalerLogsRequest(): QueryGetVideoUpscalerLogsRequest {
  return { threadId: "" };
}

export const QueryGetVideoUpscalerLogsRequest: MessageFns<QueryGetVideoUpscalerLogsRequest> = {
  encode(message: QueryGetVideoUpscalerLogsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.threadId !== "") {
      writer.uint32(10).string(message.threadId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVideoUpscalerLogsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVideoUpscalerLogsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.threadId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVideoUpscalerLogsRequest {
    return { threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : "" };
  },

  toJSON(message: QueryGetVideoUpscalerLogsRequest): unknown {
    const obj: any = {};
    if (message.threadId !== "") {
      obj.threadId = message.threadId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVideoUpscalerLogsRequest>, I>>(
    base?: I,
  ): QueryGetVideoUpscalerLogsRequest {
    return QueryGetVideoUpscalerLogsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVideoUpscalerLogsRequest>, I>>(
    object: I,
  ): QueryGetVideoUpscalerLogsRequest {
    const message = createBaseQueryGetVideoUpscalerLogsRequest();
    message.threadId = object.threadId ?? "";
    return message;
  },
};

function createBaseQueryGetVideoUpscalerLogsResponse(): QueryGetVideoUpscalerLogsResponse {
  return { videoUpscalerLogs: undefined };
}

export const QueryGetVideoUpscalerLogsResponse: MessageFns<QueryGetVideoUpscalerLogsResponse> = {
  encode(message: QueryGetVideoUpscalerLogsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoUpscalerLogs !== undefined) {
      VideoUpscalerLogs.encode(message.videoUpscalerLogs, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetVideoUpscalerLogsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetVideoUpscalerLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoUpscalerLogs = VideoUpscalerLogs.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetVideoUpscalerLogsResponse {
    return {
      videoUpscalerLogs: isSet(object.videoUpscalerLogs)
        ? VideoUpscalerLogs.fromJSON(object.videoUpscalerLogs)
        : undefined,
    };
  },

  toJSON(message: QueryGetVideoUpscalerLogsResponse): unknown {
    const obj: any = {};
    if (message.videoUpscalerLogs !== undefined) {
      obj.videoUpscalerLogs = VideoUpscalerLogs.toJSON(message.videoUpscalerLogs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetVideoUpscalerLogsResponse>, I>>(
    base?: I,
  ): QueryGetVideoUpscalerLogsResponse {
    return QueryGetVideoUpscalerLogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetVideoUpscalerLogsResponse>, I>>(
    object: I,
  ): QueryGetVideoUpscalerLogsResponse {
    const message = createBaseQueryGetVideoUpscalerLogsResponse();
    message.videoUpscalerLogs = (object.videoUpscalerLogs !== undefined && object.videoUpscalerLogs !== null)
      ? VideoUpscalerLogs.fromPartial(object.videoUpscalerLogs)
      : undefined;
    return message;
  },
};

function createBaseQueryGetPendingVideoUpscalerTaskRequest(): QueryGetPendingVideoUpscalerTaskRequest {
  return {};
}

export const QueryGetPendingVideoUpscalerTaskRequest: MessageFns<QueryGetPendingVideoUpscalerTaskRequest> = {
  encode(_: QueryGetPendingVideoUpscalerTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPendingVideoUpscalerTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPendingVideoUpscalerTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryGetPendingVideoUpscalerTaskRequest {
    return {};
  },

  toJSON(_: QueryGetPendingVideoUpscalerTaskRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPendingVideoUpscalerTaskRequest>, I>>(
    base?: I,
  ): QueryGetPendingVideoUpscalerTaskRequest {
    return QueryGetPendingVideoUpscalerTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPendingVideoUpscalerTaskRequest>, I>>(
    _: I,
  ): QueryGetPendingVideoUpscalerTaskRequest {
    const message = createBaseQueryGetPendingVideoUpscalerTaskRequest();
    return message;
  },
};

function createBaseQueryGetPendingVideoUpscalerTaskResponse(): QueryGetPendingVideoUpscalerTaskResponse {
  return { videoUpscalerTasks: [] };
}

export const QueryGetPendingVideoUpscalerTaskResponse: MessageFns<QueryGetPendingVideoUpscalerTaskResponse> = {
  encode(message: QueryGetPendingVideoUpscalerTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.videoUpscalerTasks) {
      VideoUpscalerTask.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetPendingVideoUpscalerTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetPendingVideoUpscalerTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoUpscalerTasks.push(VideoUpscalerTask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetPendingVideoUpscalerTaskResponse {
    return {
      videoUpscalerTasks: globalThis.Array.isArray(object?.videoUpscalerTasks)
        ? object.videoUpscalerTasks.map((e: any) => VideoUpscalerTask.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryGetPendingVideoUpscalerTaskResponse): unknown {
    const obj: any = {};
    if (message.videoUpscalerTasks?.length) {
      obj.videoUpscalerTasks = message.videoUpscalerTasks.map((e) => VideoUpscalerTask.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetPendingVideoUpscalerTaskResponse>, I>>(
    base?: I,
  ): QueryGetPendingVideoUpscalerTaskResponse {
    return QueryGetPendingVideoUpscalerTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetPendingVideoUpscalerTaskResponse>, I>>(
    object: I,
  ): QueryGetPendingVideoUpscalerTaskResponse {
    const message = createBaseQueryGetPendingVideoUpscalerTaskResponse();
    message.videoUpscalerTasks = object.videoUpscalerTasks?.map((e) => VideoUpscalerTask.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetWorkerRequest(): QueryGetWorkerRequest {
  return { worker: "" };
}

export const QueryGetWorkerRequest: MessageFns<QueryGetWorkerRequest> = {
  encode(message: QueryGetWorkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== "") {
      writer.uint32(10).string(message.worker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetWorkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetWorkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetWorkerRequest {
    return { worker: isSet(object.worker) ? globalThis.String(object.worker) : "" };
  },

  toJSON(message: QueryGetWorkerRequest): unknown {
    const obj: any = {};
    if (message.worker !== "") {
      obj.worker = message.worker;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetWorkerRequest>, I>>(base?: I): QueryGetWorkerRequest {
    return QueryGetWorkerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetWorkerRequest>, I>>(object: I): QueryGetWorkerRequest {
    const message = createBaseQueryGetWorkerRequest();
    message.worker = object.worker ?? "";
    return message;
  },
};

function createBaseQueryGetWorkerResponse(): QueryGetWorkerResponse {
  return { worker: undefined };
}

export const QueryGetWorkerResponse: MessageFns<QueryGetWorkerResponse> = {
  encode(message: QueryGetWorkerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.worker !== undefined) {
      Worker.encode(message.worker, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetWorkerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetWorkerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.worker = Worker.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetWorkerResponse {
    return { worker: isSet(object.worker) ? Worker.fromJSON(object.worker) : undefined };
  },

  toJSON(message: QueryGetWorkerResponse): unknown {
    const obj: any = {};
    if (message.worker !== undefined) {
      obj.worker = Worker.toJSON(message.worker);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetWorkerResponse>, I>>(base?: I): QueryGetWorkerResponse {
    return QueryGetWorkerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetWorkerResponse>, I>>(object: I): QueryGetWorkerResponse {
    const message = createBaseQueryGetWorkerResponse();
    message.worker = (object.worker !== undefined && object.worker !== null)
      ? Worker.fromPartial(object.worker)
      : undefined;
    return message;
  },
};

/** Query defines the module Query service. */
export interface Query {
  /** GetVideoUpscalerTask returns the task based on the taskId */
  GetVideoUpscalerTask(request: QueryGetVideoUpscalerTaskRequest): Promise<QueryGetVideoUpscalerTaskResponse>;
  GetVideoUpscalerLogs(request: QueryGetVideoUpscalerLogsRequest): Promise<QueryGetVideoUpscalerLogsResponse>;
  GetWorker(request: QueryGetWorkerRequest): Promise<QueryGetWorkerResponse>;
  GetPendingVideoUpscalerTasks(
    request: QueryGetPendingVideoUpscalerTaskRequest,
  ): Promise<QueryGetPendingVideoUpscalerTaskResponse>;
}

export const QueryServiceName = "janction.videoUpscaler.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.GetVideoUpscalerTask = this.GetVideoUpscalerTask.bind(this);
    this.GetVideoUpscalerLogs = this.GetVideoUpscalerLogs.bind(this);
    this.GetWorker = this.GetWorker.bind(this);
    this.GetPendingVideoUpscalerTasks = this.GetPendingVideoUpscalerTasks.bind(this);
  }
  GetVideoUpscalerTask(request: QueryGetVideoUpscalerTaskRequest): Promise<QueryGetVideoUpscalerTaskResponse> {
    const data = QueryGetVideoUpscalerTaskRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetVideoUpscalerTask", data);
    return promise.then((data) => QueryGetVideoUpscalerTaskResponse.decode(new BinaryReader(data)));
  }

  GetVideoUpscalerLogs(request: QueryGetVideoUpscalerLogsRequest): Promise<QueryGetVideoUpscalerLogsResponse> {
    const data = QueryGetVideoUpscalerLogsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetVideoUpscalerLogs", data);
    return promise.then((data) => QueryGetVideoUpscalerLogsResponse.decode(new BinaryReader(data)));
  }

  GetWorker(request: QueryGetWorkerRequest): Promise<QueryGetWorkerResponse> {
    const data = QueryGetWorkerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWorker", data);
    return promise.then((data) => QueryGetWorkerResponse.decode(new BinaryReader(data)));
  }

  GetPendingVideoUpscalerTasks(
    request: QueryGetPendingVideoUpscalerTaskRequest,
  ): Promise<QueryGetPendingVideoUpscalerTaskResponse> {
    const data = QueryGetPendingVideoUpscalerTaskRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPendingVideoUpscalerTasks", data);
    return promise.then((data) => QueryGetPendingVideoUpscalerTaskResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
